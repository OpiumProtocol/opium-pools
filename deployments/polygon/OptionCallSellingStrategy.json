{
  "address": "0x5D903992054d61E32dDc3daB743d4B4835a2FF2a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IOpiumRegistry",
          "name": "opiumRegistry_",
          "type": "address"
        },
        {
          "internalType": "contract IOpiumOnChainPositionsLens",
          "name": "opiumLens_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "signMessageLib_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "auctionHelperContract_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "limitOrderProtocol_",
          "type": "address"
        },
        {
          "internalType": "contract IRegistryAndZodiacModule",
          "name": "registryModule_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "advisor_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "sellingToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "purchasingToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellingAmount",
              "type": "uint256"
            },
            {
              "internalType": "enum UsingOpiumAuctionV2.PricingFunction",
              "name": "pricingFunction",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "pricingFunctionParams",
              "type": "uint256[]"
            },
            {
              "internalType": "enum UsingOpiumAuctionV2.PricingDirection",
              "name": "pricingDirection",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "partialFill",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "minPurchasingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPurchasingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct UsingOpiumAuctionV2.AuctionOrder",
          "name": "auctionOrder",
          "type": "tuple"
        }
      ],
      "name": "AuctionCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "sellingToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "purchasingToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellingAmount",
              "type": "uint256"
            },
            {
              "internalType": "enum UsingOpiumAuctionV2.PricingFunction",
              "name": "pricingFunction",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "pricingFunctionParams",
              "type": "uint256[]"
            },
            {
              "internalType": "enum UsingOpiumAuctionV2.PricingDirection",
              "name": "pricingDirection",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "partialFill",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "minPurchasingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPurchasingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct UsingOpiumAuctionV2.AuctionOrder",
          "name": "auctionOrder",
          "type": "tuple"
        }
      ],
      "name": "AuctionStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "margin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "params",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "oracleId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "syntheticId",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IOpiumCore.Derivative",
          "name": "derivative",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        }
      ],
      "name": "OpiumPositionsExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "margin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "params",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "oracleId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "syntheticId",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IOpiumCore.Derivative",
          "name": "derivative",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "OpiumPositionsMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "margin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "params",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "oracleId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "syntheticId",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IOpiumCore.Derivative",
          "name": "derivative",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "OpiumPositionsRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "RegistryModuleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADVISOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionAmplifier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionHelperContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionMaxPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionMinPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "sellingToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "purchasingToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellingAmount",
              "type": "uint256"
            },
            {
              "internalType": "enum UsingOpiumAuctionV2.PricingFunction",
              "name": "pricingFunction",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "pricingFunctionParams",
              "type": "uint256[]"
            },
            {
              "internalType": "enum UsingOpiumAuctionV2.PricingDirection",
              "name": "pricingDirection",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "partialFill",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "minPurchasingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPurchasingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct UsingOpiumAuctionV2.AuctionOrder",
          "name": "auctionOrder_",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "maker_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce_",
          "type": "uint256"
        }
      ],
      "name": "auctionToLimitOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "makerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "takerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct Types.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableQuantity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "sellingToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "purchasingToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellingAmount",
              "type": "uint256"
            },
            {
              "internalType": "enum UsingOpiumAuctionV2.PricingFunction",
              "name": "pricingFunction",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "pricingFunctionParams",
              "type": "uint256[]"
            },
            {
              "internalType": "enum UsingOpiumAuctionV2.PricingDirection",
              "name": "pricingDirection",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "partialFill",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "minPurchasingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPurchasingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct UsingOpiumAuctionV2.AuctionOrder",
          "name": "auctionOrder_",
          "type": "tuple"
        }
      ],
      "name": "cancelAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "derivative",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "margin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "oracleId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "syntheticId",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionMaxPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionMinPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "margin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "params",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "oracleId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "syntheticId",
              "type": "address"
            }
          ],
          "internalType": "struct IOpiumCore.Derivative",
          "name": "derivative_",
          "type": "tuple"
        }
      ],
      "name": "getAvailableQuantity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "availableQuantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredMargin",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDerivative",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "margin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "params",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "oracleId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "syntheticId",
              "type": "address"
            }
          ],
          "internalType": "struct IOpiumCore.Derivative",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextStrikePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nextStrikePrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOpiumLens",
      "outputs": [
        {
          "internalType": "contract IOpiumOnChainPositionsLens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOpiumRegistry",
      "outputs": [
        {
          "internalType": "contract IOpiumRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRegistryModule",
      "outputs": [
        {
          "internalType": "contract IRegistryAndZodiacModule",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "makerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "takerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct Types.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "hashOrder",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limitOrderProtocol",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "longPositionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionAmplifier_",
          "type": "uint256"
        }
      ],
      "name": "setAuctionAmplifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionDuration_",
          "type": "uint256"
        }
      ],
      "name": "setAuctionDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionMinPrice_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "auctionMaxPrice_",
          "type": "uint256"
        }
      ],
      "name": "setAuctionPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "margin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "params",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "oracleId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "syntheticId",
              "type": "address"
            }
          ],
          "internalType": "struct IOpiumCore.Derivative",
          "name": "derivative_",
          "type": "tuple"
        }
      ],
      "name": "setDerivative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRegistryAndZodiacModule",
          "name": "registryModule_",
          "type": "address"
        }
      ],
      "name": "setRegistryModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strikePriceDelta_",
          "type": "uint256"
        }
      ],
      "name": "setStrikePriceDelta",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strikePriceDeltaLimit_",
          "type": "uint256"
        }
      ],
      "name": "setStrikePriceDeltaLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strikePriceRounding_",
          "type": "uint256"
        }
      ],
      "name": "setStrikePriceRounding",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signMessageLib",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strikePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strikePriceDelta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strikePriceDeltaLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strikePriceRounding",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdvisor_",
          "type": "address"
        }
      ],
      "name": "transferAdvisory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5c663b7196e9024ba9e49cfeefbbb9be8a4aa8975b2660240d735c8edee9db9c",
  "receipt": {
    "to": null,
    "from": "0xd8166138Eda6dEFD2Bf2403d7637F41CE01C4BbE",
    "contractAddress": "0x5D903992054d61E32dDc3daB743d4B4835a2FF2a",
    "transactionIndex": 96,
    "gasUsed": "4971692",
    "logsBloom": "0x
    "blockHash": "0x9041380b1bbb4002f5cc288549fee2305bdf02f614873ed5eea8d7f78f9af501",
    "transactionHash": "0x5c663b7196e9024ba9e49cfeefbbb9be8a4aa8975b2660240d735c8edee9db9c",
    "logs": [
      {
        "transactionIndex": 96,
        "blockNumber": 38584880,
        "transactionHash": "0x5c663b7196e9024ba9e49cfeefbbb9be8a4aa8975b2660240d735c8edee9db9c",
        "address": "0x5D903992054d61E32dDc3daB743d4B4835a2FF2a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d8166138eda6defd2bf2403d7637f41ce01c4bbe"
        ],
        "data": "0x",
        "logIndex": 347,
        "blockHash": "0x9041380b1bbb4002f5cc288549fee2305bdf02f614873ed5eea8d7f78f9af501"
      },
      {
        "transactionIndex": 96,
        "blockNumber": 38584880,
        "transactionHash": "0x5c663b7196e9024ba9e49cfeefbbb9be8a4aa8975b2660240d735c8edee9db9c",
        "address": "0x5D903992054d61E32dDc3daB743d4B4835a2FF2a",
        "topics": [
          "0x8a94a9087718f0e83aa163e33a15d3edef3019f120f78e93fba55ecf79750c5d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e0cbf4f7b0ba46c4c35cde49a20e0388f9e9c2d1"
        ],
        "data": "0x",
        "logIndex": 348,
        "blockHash": "0x9041380b1bbb4002f5cc288549fee2305bdf02f614873ed5eea8d7f78f9af501"
      },
      {
        "transactionIndex": 96,
        "blockNumber": 38584880,
        "transactionHash": "0x5c663b7196e9024ba9e49cfeefbbb9be8a4aa8975b2660240d735c8edee9db9c",
        "address": "0x5D903992054d61E32dDc3daB743d4B4835a2FF2a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000d8166138eda6defd2bf2403d7637f41ce01c4bbe",
          "0x000000000000000000000000f70a970cd80098cd6de31ae6c0bb3637ae27de56"
        ],
        "data": "0x",
        "logIndex": 349,
        "blockHash": "0x9041380b1bbb4002f5cc288549fee2305bdf02f614873ed5eea8d7f78f9af501"
      },
      {
        "transactionIndex": 96,
        "blockNumber": 38584880,
        "transactionHash": "0x5c663b7196e9024ba9e49cfeefbbb9be8a4aa8975b2660240d735c8edee9db9c",
        "address": "0x5D903992054d61E32dDc3daB743d4B4835a2FF2a",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f70a970cd80098cd6de31ae6c0bb3637ae27de56",
          "0x000000000000000000000000d8166138eda6defd2bf2403d7637f41ce01c4bbe"
        ],
        "data": "0x",
        "logIndex": 350,
        "blockHash": "0x9041380b1bbb4002f5cc288549fee2305bdf02f614873ed5eea8d7f78f9af501"
      },
      {
        "transactionIndex": 96,
        "blockNumber": 38584880,
        "transactionHash": "0x5c663b7196e9024ba9e49cfeefbbb9be8a4aa8975b2660240d735c8edee9db9c",
        "address": "0x5D903992054d61E32dDc3daB743d4B4835a2FF2a",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9c1ca198f61ac1647c38f20b6678649f8e87b7e06309094d812edd1e9119d309",
          "0x000000000000000000000000d8166138eda6defd2bf2403d7637f41ce01c4bbe",
          "0x000000000000000000000000d8166138eda6defd2bf2403d7637f41ce01c4bbe"
        ],
        "data": "0x",
        "logIndex": 351,
        "blockHash": "0x9041380b1bbb4002f5cc288549fee2305bdf02f614873ed5eea8d7f78f9af501"
      },
      {
        "transactionIndex": 96,
        "blockNumber": 38584880,
        "transactionHash": "0x5c663b7196e9024ba9e49cfeefbbb9be8a4aa8975b2660240d735c8edee9db9c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d8166138eda6defd2bf2403d7637f41ce01c4bbe",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001f9eae10d1cab8c00000000000000000000000000000000000000000000000020a1a85c98e48fcd00000000000000000000000000000000000000000001d1bef96c56664f8ff8d80000000000000000000000000000000000000000000000001ea7bd7b8bc7e44100000000000000000000000000000000000000000001d1befb6641475caca464",
        "logIndex": 352,
        "blockHash": "0x9041380b1bbb4002f5cc288549fee2305bdf02f614873ed5eea8d7f78f9af501"
      }
    ],
    "blockNumber": 38584880,
    "cumulativeGasUsed": "20376511",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x17b6ffe276e8A4a299a5a87a656aFc5b8FA3ee4a",
    "0x33afAaA35df82D56833B7EEacb2b65Eb805AC774",
    "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
    "0x06eb4bCc14b8C1664a2d4e2CdE8fA2F992332fCd",
    "0x94bc2a1c732bcad7343b25af48385fe76e08734f",
    "0xe0CBf4F7B0BA46c4c35CDe49A20E0388f9e9C2d1",
    "0xf70a970cd80098cd6de31ae6c0bb3637ae27de56",
    "0xd8166138Eda6dEFD2Bf2403d7637F41CE01C4BbE"
  ],
  "numDeployments": 1,
  "solcInputHash": "322501c00a7a31bf5f666aea4d1097c4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IOpiumRegistry\",\"name\":\"opiumRegistry_\",\"type\":\"address\"},{\"internalType\":\"contract IOpiumOnChainPositionsLens\",\"name\":\"opiumLens_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signMessageLib_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auctionHelperContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitOrderProtocol_\",\"type\":\"address\"},{\"internalType\":\"contract IRegistryAndZodiacModule\",\"name\":\"registryModule_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"advisor_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellingToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"purchasingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellingAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum UsingOpiumAuctionV2.PricingFunction\",\"name\":\"pricingFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"pricingFunctionParams\",\"type\":\"uint256[]\"},{\"internalType\":\"enum UsingOpiumAuctionV2.PricingDirection\",\"name\":\"pricingDirection\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"partialFill\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minPurchasingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchasingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct UsingOpiumAuctionV2.AuctionOrder\",\"name\":\"auctionOrder\",\"type\":\"tuple\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellingToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"purchasingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellingAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum UsingOpiumAuctionV2.PricingFunction\",\"name\":\"pricingFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"pricingFunctionParams\",\"type\":\"uint256[]\"},{\"internalType\":\"enum UsingOpiumAuctionV2.PricingDirection\",\"name\":\"pricingDirection\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"partialFill\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minPurchasingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchasingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct UsingOpiumAuctionV2.AuctionOrder\",\"name\":\"auctionOrder\",\"type\":\"tuple\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"oracleId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticId\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IOpiumCore.Derivative\",\"name\":\"derivative\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"}],\"name\":\"OpiumPositionsExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"oracleId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticId\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IOpiumCore.Derivative\",\"name\":\"derivative\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"OpiumPositionsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"oracleId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticId\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IOpiumCore.Derivative\",\"name\":\"derivative\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"OpiumPositionsRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"RegistryModuleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADVISOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionAmplifier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionHelperContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionMaxPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionMinPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellingToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"purchasingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellingAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum UsingOpiumAuctionV2.PricingFunction\",\"name\":\"pricingFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"pricingFunctionParams\",\"type\":\"uint256[]\"},{\"internalType\":\"enum UsingOpiumAuctionV2.PricingDirection\",\"name\":\"pricingDirection\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"partialFill\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minPurchasingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchasingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct UsingOpiumAuctionV2.AuctionOrder\",\"name\":\"auctionOrder_\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"maker_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce_\",\"type\":\"uint256\"}],\"name\":\"auctionToLimitOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct Types.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellingToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"purchasingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellingAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum UsingOpiumAuctionV2.PricingFunction\",\"name\":\"pricingFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"pricingFunctionParams\",\"type\":\"uint256[]\"},{\"internalType\":\"enum UsingOpiumAuctionV2.PricingDirection\",\"name\":\"pricingDirection\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"partialFill\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minPurchasingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchasingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct UsingOpiumAuctionV2.AuctionOrder\",\"name\":\"auctionOrder_\",\"type\":\"tuple\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"derivative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracleId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticId\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionMaxPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionMinPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"oracleId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticId\",\"type\":\"address\"}],\"internalType\":\"struct IOpiumCore.Derivative\",\"name\":\"derivative_\",\"type\":\"tuple\"}],\"name\":\"getAvailableQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredMargin\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDerivative\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"oracleId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticId\",\"type\":\"address\"}],\"internalType\":\"struct IOpiumCore.Derivative\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextStrikePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nextStrikePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpiumLens\",\"outputs\":[{\"internalType\":\"contract IOpiumOnChainPositionsLens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpiumRegistry\",\"outputs\":[{\"internalType\":\"contract IOpiumRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistryModule\",\"outputs\":[{\"internalType\":\"contract IRegistryAndZodiacModule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct Types.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"hashOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitOrderProtocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"longPositionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionAmplifier_\",\"type\":\"uint256\"}],\"name\":\"setAuctionAmplifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionDuration_\",\"type\":\"uint256\"}],\"name\":\"setAuctionDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionMinPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionMaxPrice_\",\"type\":\"uint256\"}],\"name\":\"setAuctionPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"oracleId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticId\",\"type\":\"address\"}],\"internalType\":\"struct IOpiumCore.Derivative\",\"name\":\"derivative_\",\"type\":\"tuple\"}],\"name\":\"setDerivative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRegistryAndZodiacModule\",\"name\":\"registryModule_\",\"type\":\"address\"}],\"name\":\"setRegistryModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strikePriceDelta_\",\"type\":\"uint256\"}],\"name\":\"setStrikePriceDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strikePriceDeltaLimit_\",\"type\":\"uint256\"}],\"name\":\"setStrikePriceDeltaLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strikePriceRounding_\",\"type\":\"uint256\"}],\"name\":\"setStrikePriceRounding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signMessageLib\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strikePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strikePriceDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strikePriceDeltaLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strikePriceRounding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdvisor_\",\"type\":\"address\"}],\"name\":\"transferAdvisory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAvailableQuantity((uint256,uint256,uint256[],address,address,address))\":{\"params\":{\"derivative_\":\"provided derivative to mint\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isValidSignature(bytes32,bytes)\":{\"details\":\"Should return whether the signature provided is valid for the provided data\",\"params\":{\"hash\":\"Hash of the data to be signed\",\"signature\":\"Signature byte array associated with _data\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setRegistryModule(address)\":{\"params\":{\"registryModule_\":\"new address / instance of the Registry Module\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ADVISOR_ROLE()\":{\"notice\":\"Constant containing the hash of the ADVISOR_ROLE\"},\"BASE()\":{\"notice\":\"Reference value (basis) representing 100%\"},\"getAvailableQuantity((uint256,uint256,uint256[],address,address,address))\":{\"notice\":\"Calculates the available quantity of the provided derivative to that's possible to mint with the current Vault's liquidity as well as the margin required to be locked within the minting process\"},\"getNextStrikePrice()\":{\"notice\":\"Public Getters \"},\"getOpiumLens()\":{\"notice\":\"Returns the instance of Opium Protocol V2 Lens\"},\"getOpiumRegistry()\":{\"notice\":\"Returns the instance of Opium Protocol V2 Registry\"},\"getRegistryModule()\":{\"notice\":\"Returns Registry Module instance\"},\"rebalance()\":{\"notice\":\"Trigger Accounting Module to start rebalancing process only when Rebalancing is possible\"},\"setDerivative((uint256,uint256,uint256[],address,address,address))\":{\"notice\":\"Public Setters \"},\"setRegistryModule(address)\":{\"notice\":\"Changes Registry Module instance\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol\":\"OptionCallSellingStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/base/RegistryManagerNonUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../interfaces/IRegistryModule.sol\\\";\\n\\n/**\\n    @notice Non upgradeable abstract contract to allow other modules use Registry Module\\n    Error codes:\\n        - RM1 = Incorrect input\\n */\\nabstract contract RegistryManagerNonUpgradeable is ReentrancyGuard, Ownable {\\n    event RegistryModuleSet(address indexed previousAddress, address indexed newAddress);\\n\\n    IRegistryAndZodiacModule internal _registryModule;\\n\\n    /// @notice Constructor\\n    /// @param registryModule_ address / instance of the Registry Module to setup\\n    /// @param owner_ address of the RegistryManager's owner\\n    constructor(IRegistryAndZodiacModule registryModule_, address owner_) {\\n        // Set registry module instance\\n        _setRegistryModule(registryModule_);\\n        // Transfer ownership\\n        transferOwnership(owner_);\\n    }\\n\\n    // External setters\\n    /// @notice Returns Registry Module instance\\n    function getRegistryModule() external view returns (IRegistryAndZodiacModule) {\\n        return _registryModule;\\n    }\\n\\n    /// @notice Changes Registry Module instance\\n    /// @param registryModule_ new address / instance of the Registry Module\\n    function setRegistryModule(IRegistryAndZodiacModule registryModule_) external onlyOwner {\\n        _setRegistryModule(registryModule_);\\n    }\\n\\n    // Private setters\\n    /// @dev Private Registry Manager instance setter with input sanitizing\\n    /// @param registryModule_ address / instance of the Registry Module to set\\n    function _setRegistryModule(IRegistryAndZodiacModule registryModule_) private nonReentrant {\\n        // Check if not a zero address\\n        require(address(registryModule_) != address(0), \\\"RM1\\\");\\n        \\n        address previousAddress = address(_registryModule);\\n        _registryModule = registryModule_;\\n        \\n        emit RegistryModuleSet(previousAddress, address(_registryModule));\\n    }\\n}\\n\",\"keccak256\":\"0xbc7919ddf0f74a75ca2b95939a5bb6227da4982c71c5d2b982ffab5542276c42\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IAccountingModule.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\ninterface IAccountingModule {\\n  event Rebalanced(uint256 totalLiquidityBefore, uint256 profitBeforeFees, uint256 profitFee, uint256 maintenanceFee, uint256 loss);\\n  event FeeCollectorSet(address indexed previousFeeCollector, address indexed newFeeCollector);\\n  event ImmediateProfitFeeSet(uint256 previousFee, uint256 newFee);\\n  event AnnualMaintenanceFeeSet(uint256 previousFee, uint256 newFee);\\n  event BenchmarkProfitSet(uint256 previousBenchmarkProfit, uint256 newBenchmarkProfit);\\n\\n  function getUnderlying() external view returns (IERC20MetadataUpgradeable);\\n  function getTotalLiquidity() external view returns (uint256);\\n  function getUtilizedLiquidity() external view returns (uint256);\\n  function getAvailableLiquidity() external view returns (uint256);\\n  function getLiquidityUtilizationRatio() external view returns (uint256);\\n  function getAccumulatedFees() external view returns (uint256);\\n  function hasPosition(address position_) external view returns (bool);\\n  function getFeeCollector() external view returns (address);\\n  function getImmediateProfitFee() external view returns (uint256);\\n  function getAnnualMaintenanceFee() external view returns (uint256);\\n  function getBenchmarkProfit() external view returns (uint256);\\n  function calculateRageQuitFee(uint256 principal_) external view returns (uint256);\\n\\n  function changeTotalLiquidity(uint256 amount_, bool add_) external;\\n  function changeHoldingPosition(address position_, bool add_) external;\\n  function rebalance() external;\\n  function collectFees() external;\\n  function setFeeCollector(address feeCollector_) external;\\n  function setImmediateProfitFee(uint256 immediateProfitFee_) external;\\n  function setAnnualMaintenanceFee(uint256 annualMaintenanceFee_) external;\\n  function setBenchmarkProfit(uint256 benchmarkProfit_) external;\\n}\\n\",\"keccak256\":\"0x55fb8c5281bd82ee0db7579dcde1ea9a5ad68b1ac5bd52d50bdeb08edf7b8959\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILifecycleModule.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface ILifecycleModule {\\n  event EpochStarted(uint256 indexed epochId, uint256 epochStart);\\n\\n  function getEpochId() external view returns (uint16);\\n  function getCurrentEpochStart() external view returns (uint256);\\n  function getCurrentEpochEnd() external view returns (uint256);\\n  function getEpochLength() external view returns (uint256);\\n  function getStakingPhaseLength() external view returns (uint256);\\n  function getTradingPhaseLength() external view returns (uint256);\\n  function isStakingPhase() external view returns (bool);\\n  function isTradingPhase() external view returns (bool);\\n  function isIdlePhase() external view returns (bool);\\n  function canDeposit() external view returns (bool);\\n  function canWithdraw() external view returns (bool);\\n  function canTrade() external view returns (bool);\\n  function canRebalance() external view returns (bool);\\n\\n  function progressEpoch() external;\\n}\\n\",\"keccak256\":\"0x985d4aab5d238b20b1d09ef89dd5ab3d2b8ba092b54e414298c1c6b94fcd5fba\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IRegistryModule.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccountingModule.sol\\\";\\nimport \\\"./ILifecycleModule.sol\\\";\\n\\ninterface IRegistryModule {\\n  event RegistryAddressesSet(RegistryAddresses registryAddresses);\\n\\n  struct RegistryAddresses {\\n    IAccountingModule accountingModule;\\n    ILifecycleModule lifecycleModule;\\n    address stakingModule;\\n    address strategyModule;\\n  }\\n\\n  // Getters\\n  function getRegistryAddresses() external view returns (RegistryAddresses memory);\\n\\n  // Setters\\n  function setRegistryAddresses(RegistryAddresses memory registryAddresses_) external;\\n  function executeOnVault(address target, bytes memory data) external;\\n  function executeOnVaultDelegate(address target, bytes memory data) external;\\n}\\n\\ninterface IZodiacModule {\\n  function avatar() external view returns (address);\\n}\\n\\ninterface IRegistryAndZodiacModule is IZodiacModule, IRegistryModule {}\\n\",\"keccak256\":\"0x6ec2a6521a1ea07b1095e1f3f8e68ac39464bce636e51513890dbb4a63819a67\",\"license\":\"agpl-3.0\"},\"contracts/modules/Strategies/libraries/AdvisableStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"./BaseStrategy.sol\\\";\\n\\nabstract contract AdvisableStrategy is BaseStrategy, AccessControl {\\n  /// @notice Constant containing the hash of the ADVISOR_ROLE\\n  bytes32 public constant ADVISOR_ROLE = keccak256(\\\"ADVISOR_ROLE\\\");\\n\\n  constructor(address owner_, address advisor_) {\\n    _setupRole(DEFAULT_ADMIN_ROLE, owner_);\\n    _setupRole(ADVISOR_ROLE, advisor_);\\n  }\\n\\n  function transferAdvisory(address newAdvisor_) external onlyRole(ADVISOR_ROLE) {\\n    _revokeRole(ADVISOR_ROLE, msg.sender);\\n    _grantRole(ADVISOR_ROLE, newAdvisor_);\\n  }\\n}\\n\",\"keccak256\":\"0x1c177eefc21515fd117987b044ef2edf1f535598c8927529d606add0f134de64\",\"license\":\"agpl-3.0\"},\"contracts/modules/Strategies/libraries/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../base/RegistryManagerNonUpgradeable.sol\\\";\\n\\n/**\\n  @notice BaseStrategy\\n  Error cores:\\n    - BS1 = Not trading phase\\n    - BS2 = Can't rebalance yet\\n */\\nabstract contract BaseStrategy is RegistryManagerNonUpgradeable {\\n  /** MODIFIERS */\\n  /// @notice Restricts access to function to be callable only when Trading Phase is active\\n  modifier canTrade() {\\n    require(\\n      _registryModule\\n        .getRegistryAddresses()\\n        .lifecycleModule\\n        .canTrade(),\\n        \\\"BS1\\\"\\n    );\\n    _;\\n  }\\n\\n  /// @notice Restricts access to function to be callable only when Rebalancing is available\\n  modifier canRebalance() {\\n    require(\\n      _registryModule\\n        .getRegistryAddresses()\\n        .lifecycleModule\\n        .canRebalance(),\\n        \\\"BS2\\\"\\n    );\\n    _;\\n  }\\n\\n  /** EXTERNAL SETTERS */\\n  /// @notice Trigger Accounting Module to start rebalancing process only when Rebalancing is possible\\n  function rebalance() external canRebalance {\\n    _registryModule\\n      .getRegistryAddresses()\\n      .accountingModule\\n      .rebalance();\\n  }\\n}\\n\",\"keccak256\":\"0x23c7723dd9951abb26fa99da672ec94eddd1ad200fe7f4cd15e85ae785ac9d3e\",\"license\":\"agpl-3.0\"},\"contracts/modules/Strategies/libraries/OpiumAuctionV2EnabledStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"opium-auction-v2/contracts/utils/UsingOpiumAuctionV2.sol\\\";\\n\\nimport \\\"../../../utils/Selectors.sol\\\";\\n\\nimport \\\"./BaseStrategy.sol\\\";\\n\\nlibrary LimitOrderProtocolSelectors {\\n  bytes4 internal constant LIMIT_ORDER_PROTOCOL_CANCEL_ORDER = bytes4(keccak256(bytes(\\\"cancelOrder((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes))\\\")));\\n}\\n\\nabstract contract OpiumAuctionV2EnabledStrategy is UsingOpiumAuctionV2, BaseStrategy {\\n  event AuctionStarted(AuctionOrder auctionOrder);\\n  event AuctionCancelled(AuctionOrder auctionOrder);\\n  \\n  address public signMessageLib;\\n\\n  constructor(address signMessageLib_) {\\n    signMessageLib = signMessageLib_;\\n  }\\n\\n  function _startAuction(AuctionOrder memory auctionOrder_) internal {\\n    Types.Order memory order = auctionToLimitOrder(auctionOrder_, _registryModule.avatar(), 0);\\n\\n    bytes32 hashedEncodedOrder = hashOrder(order);\\n\\n    // Approve sellingAmount to limitOrderProtocol to start auction\\n    bytes memory approveCalldata = abi.encodeWithSelector(\\n      Selectors.ERC20_APPROVE,\\n      limitOrderProtocol,\\n      auctionOrder_.sellingAmount\\n    );\\n    _registryModule.executeOnVault(address(auctionOrder_.sellingToken), approveCalldata);\\n\\n    // Delegate Call: Sign message\\n    bytes memory signMessageCalldata = abi.encodeWithSelector(\\n      Selectors.SAFE_SIGN_MESSAGE,\\n      abi.encodePacked(hashedEncodedOrder)\\n    );\\n    _registryModule.executeOnVaultDelegate(signMessageLib, signMessageCalldata);\\n\\n    emit AuctionStarted(auctionOrder_);\\n  }\\n\\n  function _cancelAuction(AuctionOrder memory auctionOrder_) internal {\\n    Types.Order memory order = auctionToLimitOrder(auctionOrder_, _registryModule.avatar(), 0);\\n\\n    // Cancel order on limitOrderProtocol\\n    bytes memory cancelCalldata = abi.encodeWithSelector(\\n      LimitOrderProtocolSelectors.LIMIT_ORDER_PROTOCOL_CANCEL_ORDER,\\n      order\\n    );\\n    _registryModule.executeOnVault(limitOrderProtocol, cancelCalldata);\\n\\n    emit AuctionCancelled(auctionOrder_);\\n  }\\n\\n  /**\\n    @dev Not used here, because order signature is checked against GnosisSafe\\n   */\\n  function _isValidOrder(Types.Order memory /** order_ */) internal pure override returns (bool) {\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0x3192fcece74fd68afde2c852226b1bd6969e5ecae56e79dcd738c4ed39b9f7e2\",\"license\":\"agpl-3.0\"},\"contracts/modules/Strategies/libraries/OpiumProtocolV2EnabledStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../../../utils/Selectors.sol\\\";\\n\\nimport \\\"./external/opium-protocol/IOpiumRegistry.sol\\\";\\nimport \\\"./external/opium-protocol/IOpiumCore.sol\\\";\\nimport \\\"./external/opium-protocol/IOpiumDerivativeLogic.sol\\\";\\nimport \\\"./external/opium-protocol/LibOpiumCalculator.sol\\\";\\nimport \\\"./external/opium-protocol/IOpiumOnChainPositionsLens.sol\\\";\\n\\nimport \\\"./BaseStrategy.sol\\\";\\n\\nlibrary OpiumSelectors {\\n  bytes4 internal constant OPIUM_PROTOCOL_CREATE_AND_MINT = bytes4(keccak256(bytes(\\\"createAndMint((uint256,uint256,uint256[],address,address,address),uint256,address[2])\\\")));\\n  bytes4 internal constant OPIUM_PROTOCOL_REDEEM = bytes4(keccak256(bytes(\\\"redeem(address[2],uint256)\\\")));\\n  bytes4 internal constant OPIUM_PROTOCOL_EXECUTE = bytes4(keccak256(bytes(\\\"execute(address,uint256)\\\")));\\n}\\n\\nabstract contract OpiumProtocolV2EnabledStrategy is BaseStrategy {\\n  using LibOpiumCalculator for uint256;\\n  using SafeERC20 for IERC20Metadata;\\n\\n  event OpiumPositionsMinted(IOpiumCore.Derivative derivative, uint256 quantity);\\n  event OpiumPositionsRedeemed(IOpiumCore.Derivative derivative, uint256 quantity);\\n  event OpiumPositionsExecuted(IOpiumCore.Derivative derivative, uint256 quantity, bool long);\\n  \\n  /// @notice Reference value (basis) representing 100%\\n  uint256 public constant BASE = 1e18;\\n\\n  /// @notice Instance of the Opium Protocol V2 Registry contract\\n  IOpiumRegistry private _opiumRegistry;\\n  /// @notice Instance of the Opium Protocol V2 Lens contract\\n  IOpiumOnChainPositionsLens private _opiumLens;\\n\\n  /// @notice Constructor of OpiumProtocolV2EnabledStrategy library\\n  /// @param opiumRegistry_ instance of the Opium Protocol V2 Registry contract\\n  /// @param opiumLens_ instance of the Opium Protocol V2 Lens contract\\n  constructor(\\n    IOpiumRegistry opiumRegistry_,\\n    IOpiumOnChainPositionsLens opiumLens_\\n  ) {\\n    // Setup instance of Opium Registry\\n    _setOptionRegistry(opiumRegistry_);\\n    // Setup instance of Opium Lens\\n    _setOpiumLens(opiumLens_);\\n  }\\n\\n  /** Public getters */\\n  /// @notice Returns the instance of Opium Protocol V2 Registry\\n  function getOpiumRegistry() external view returns (IOpiumRegistry) {\\n    return _opiumRegistry;\\n  }\\n\\n  /// @notice Returns the instance of Opium Protocol V2 Lens\\n  function getOpiumLens() external view returns (IOpiumOnChainPositionsLens) {\\n    return _opiumLens;\\n  }\\n\\n  /** Internal getters */\\n\\n  /// @notice Calculates the available quantity of the provided derivative to that's possible to mint with the current Vault's liquidity as well as the margin required to be locked within the minting process\\n  /// @param derivative_ provided derivative to mint\\n  function getAvailableQuantity(IOpiumCore.Derivative memory derivative_) public view returns (uint256 availableQuantity, uint256 requiredMargin) {\\n    // Get available liquidity\\n    uint256 availableLiquidity = _registryModule.getRegistryAddresses().accountingModule.getAvailableLiquidity();\\n    // Get required margin per contract\\n    uint256[2] memory margins;\\n    (margins[0], margins[1]) = IOpiumDerivativeLogic(derivative_.syntheticId).getMargin(derivative_);\\n    // Add LONG and SHORT positions margins together\\n    uint256 totalMargin = margins[0] + margins[1];\\n\\n    // Calculate the available quantity to mint\\n    availableQuantity = availableLiquidity * BASE / totalMargin;\\n    // Calculate the required margin to mint\\n    requiredMargin = availableQuantity * totalMargin / BASE;\\n  }\\n\\n  /** Internal setters */\\n  /// @notice Allows advisor to mint the maximum possible quantity of the provided derivative on the Vault's behalf\\n  /// @param derivative_ provided derivative to mint\\n  function _opiumV2MintPositions(IOpiumCore.Derivative memory derivative_) internal returns (address, address, uint256) {\\n    // Get available quantity and required margin\\n    (uint256 availableQuantity, uint256 requiredMargin) = getAvailableQuantity(derivative_);\\n\\n    // Approve margin to TokenSpender to create positions\\n    bytes memory data = abi.encodeWithSelector(\\n      Selectors.ERC20_APPROVE,\\n      _opiumRegistry.getProtocolAddresses().tokenSpender,\\n      requiredMargin\\n    );\\n    _registryModule.executeOnVault(derivative_.token, data);\\n\\n    // Create positions\\n    data = abi.encodeWithSelector(\\n      OpiumSelectors.OPIUM_PROTOCOL_CREATE_AND_MINT,\\n      derivative_,\\n      availableQuantity,\\n      [_registryModule.avatar(), _registryModule.avatar()]\\n    );\\n    _registryModule.executeOnVault(_opiumRegistry.getProtocolAddresses().core, data);\\n\\n    // Calculate addresses of the LONG and SHORT positions\\n    (address longPositionAddress, address shortPositionAddress) = _opiumLens.predictPositionsAddressesByDerivative(derivative_);\\n\\n    // Get the instance of the Accounting Module\\n    IAccountingModule accountingModule = _registryModule.getRegistryAddresses().accountingModule;\\n\\n    // Notify Accounting Module of the new positions\\n    accountingModule.changeHoldingPosition(longPositionAddress, true);\\n    accountingModule.changeHoldingPosition(shortPositionAddress, true);\\n\\n    emit OpiumPositionsMinted(derivative_, availableQuantity);\\n\\n    return (longPositionAddress, shortPositionAddress, availableQuantity);\\n  }\\n\\n  /// @notice Allows to execute all the positions remaining in the Vault when can Rebalance\\n  function _opiumV2ExecutePositions(IOpiumCore.Derivative memory derivative_) internal {\\n    // Calculate LONG + SHORT positions addresses\\n    (address longPositionAddress, address shortPositionAddress) = _opiumLens.predictPositionsAddressesByDerivative(derivative_);\\n    // Get the Vault balance of the LONG position\\n    uint256 longPositionBalance = IERC20Metadata(longPositionAddress).balanceOf(_registryModule.avatar());\\n    // Get the Vault balance of the SHORT position\\n    uint256 shortPositionBalance = IERC20Metadata(shortPositionAddress).balanceOf(_registryModule.avatar());\\n\\n    // Check if positions redemption is possible (meaning Vault holds both LONG and SHORT positions)\\n    if (longPositionBalance != 0 && shortPositionBalance != 0) {\\n      // Calculate minimum positions for redemption\\n      uint256 redeemPositions = longPositionBalance > shortPositionBalance ? shortPositionBalance : longPositionBalance;\\n\\n      // Redeem positions\\n      bytes memory data = abi.encodeWithSelector(OpiumSelectors.OPIUM_PROTOCOL_REDEEM, [longPositionAddress,shortPositionAddress], redeemPositions);\\n      _registryModule.executeOnVault(_opiumRegistry.getProtocolAddresses().core, data);\\n\\n      longPositionBalance -= redeemPositions;\\n      shortPositionBalance -= redeemPositions;\\n\\n      emit OpiumPositionsRedeemed(derivative_, redeemPositions);\\n    }\\n\\n    // If any amount of LONG position remains, execute separately\\n    if (longPositionBalance > 0) {\\n      bytes memory data = abi.encodeWithSelector(OpiumSelectors.OPIUM_PROTOCOL_EXECUTE, longPositionAddress, longPositionBalance);\\n      _registryModule.executeOnVault(_opiumRegistry.getProtocolAddresses().core, data);\\n      emit OpiumPositionsExecuted(derivative_, longPositionBalance, true);\\n    }\\n\\n    // If any amount of SHORT position remains, execute separately\\n    if (shortPositionBalance > 0) {\\n      bytes memory data = abi.encodeWithSelector(OpiumSelectors.OPIUM_PROTOCOL_EXECUTE, shortPositionAddress, shortPositionBalance);\\n      _registryModule.executeOnVault(_opiumRegistry.getProtocolAddresses().core, data);\\n      emit OpiumPositionsExecuted(derivative_, shortPositionBalance, false);\\n    }\\n\\n    // Get Accounting Module instance\\n    IAccountingModule accountingModule = _registryModule.getRegistryAddresses().accountingModule;\\n\\n    // Notify Accounting Module of the cleared positions\\n    accountingModule.changeHoldingPosition(longPositionAddress, false);\\n    accountingModule.changeHoldingPosition(shortPositionAddress, false);\\n  }\\n\\n  /** Private setters */\\n  /// @dev Private setter of Opium Registry\\n  /// @param opiumRegistry_ new Opium Registry\\n  function _setOptionRegistry(IOpiumRegistry opiumRegistry_) private {\\n    _opiumRegistry = opiumRegistry_;\\n  }\\n\\n  /// @dev Private setter of Opium Lens\\n  /// @param opiumLens_ new Opium Lens\\n  function _setOpiumLens(IOpiumOnChainPositionsLens opiumLens_) private {\\n    _opiumLens = opiumLens_;\\n  }\\n}\\n\",\"keccak256\":\"0xd95c270b7e378d0fb988759b7a1a28ef3db135340af04fb975a29e713e4822a1\",\"license\":\"agpl-3.0\"},\"contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./external/opium-products/ILiveFeedOracleId.sol\\\";\\n\\nimport \\\"./OptionsSellingStrategy.sol\\\";\\n\\ncontract OptionCallSellingStrategy is OptionsSellingStrategy {\\n  constructor(\\n    IOpiumRegistry opiumRegistry_,\\n    IOpiumOnChainPositionsLens opiumLens_,\\n    address signMessageLib_,\\n    address auctionHelperContract_,\\n    address limitOrderProtocol_,\\n    IRegistryAndZodiacModule registryModule_,\\n    address owner_,\\n    address advisor_\\n  )\\n    OpiumProtocolV2EnabledStrategy(opiumRegistry_, opiumLens_)\\n    OpiumAuctionV2EnabledStrategy(signMessageLib_)\\n    UsingOpiumAuctionV2(auctionHelperContract_, limitOrderProtocol_)\\n    AdvisableStrategy(owner_, advisor_)\\n    RegistryManagerNonUpgradeable(registryModule_, owner_)\\n  {}\\n\\n  function getNextStrikePrice() public view override returns (uint256 nextStrikePrice) {\\n    uint256 currentPrice = ILiveFeedOracleId(derivative.oracleId).getResult();\\n    nextStrikePrice = currentPrice * (BASE + strikePriceDelta) / BASE;\\n\\n    uint256 mod = nextStrikePrice % strikePriceRounding;\\n    bool roundUp = mod >= (strikePriceRounding / 2);\\n\\n    nextStrikePrice = nextStrikePrice / strikePriceRounding * strikePriceRounding;\\n\\n    if (roundUp) {\\n      nextStrikePrice += strikePriceRounding;\\n    }\\n\\n    if (nextStrikePrice == 0) {\\n      nextStrikePrice = strikePriceRounding;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xf033958b664892e11209c8117ac735dc300abc6dfe8bbc15686f0f3dc2a1dc56\",\"license\":\"agpl-3.0\"},\"contracts/modules/Strategies/libraries/OptionsSellingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OpiumProtocolV2EnabledStrategy.sol\\\";\\nimport \\\"./OpiumAuctionV2EnabledStrategy.sol\\\";\\nimport \\\"./AdvisableStrategy.sol\\\";\\n\\nabstract contract OptionsSellingStrategy is OpiumProtocolV2EnabledStrategy, OpiumAuctionV2EnabledStrategy, AdvisableStrategy {\\n  IOpiumCore.Derivative public derivative;\\n\\n  // Configurable\\n  uint256 public strikePriceDeltaLimit = 0.1e18;\\n\\n  uint256 public strikePriceDelta = 0.1e18;\\n  uint256 public strikePriceRounding = 100e18;\\n\\n  uint256 public auctionDuration = 40 minutes;\\n  uint256 public auctionMinPrice = 0.0005e18;\\n  uint256 public auctionMaxPrice = 0.0020e18;\\n  uint256 public auctionAmplifier = 10;\\n\\n  // Non-configurable\\n  uint256 public strikePrice;\\n  address public longPositionAddress;\\n  uint256 public availableQuantity;\\n\\n  /** Public Getters */\\n  function getNextStrikePrice() public view virtual returns (uint256);\\n\\n  function getDerivative() public view returns (IOpiumCore.Derivative memory) {\\n    return derivative;\\n  }\\n\\n  function getAuctionMinPrice() public view returns (uint256) {\\n    return auctionMinPrice;\\n  }\\n\\n  function getAuctionMaxPrice() public view returns (uint256) {\\n    return auctionMaxPrice;\\n  }\\n\\n  /** Public Setters */\\n  // Owner\\n  function setDerivative(IOpiumCore.Derivative memory derivative_) external onlyOwner {\\n    _setDerivative(derivative_);\\n  }\\n\\n  function setStrikePriceDeltaLimit(uint256 strikePriceDeltaLimit_) external onlyOwner {\\n    _setStrikePriceDeltaLimit(strikePriceDeltaLimit_);\\n  }\\n\\n  // Advisor\\n  function setStrikePriceDelta(uint256 strikePriceDelta_) external onlyRole(ADVISOR_ROLE) {\\n    _setStrikePriceDelta(strikePriceDelta_);\\n  }\\n\\n  function setStrikePriceRounding(uint256 strikePriceRounding_) external onlyRole(ADVISOR_ROLE) {\\n    _setStrikePriceRounding(strikePriceRounding_);\\n  }\\n\\n  function cancelAuction(AuctionOrder memory auctionOrder_) external onlyRole(ADVISOR_ROLE) {\\n    _cancelAuction(auctionOrder_);\\n  }\\n\\n  function setAuctionDuration(uint256 auctionDuration_) external onlyRole(ADVISOR_ROLE) {\\n    _setAuctionDuration(auctionDuration_);\\n  }\\n\\n  function setAuctionPrices(uint256 auctionMinPrice_, uint256 auctionMaxPrice_) external onlyRole(ADVISOR_ROLE) {\\n    _setAuctionPrices(auctionMinPrice_, auctionMaxPrice_);\\n  }\\n\\n  function setAuctionAmplifier(uint256 auctionAmplifier_) external onlyRole(ADVISOR_ROLE) {\\n    _setAuctionAmplifier(auctionAmplifier_);\\n  }\\n\\n  // Anyone\\n  function mint() external canTrade() {\\n    require(strikePrice == 0, \\\"OSS2\\\");\\n\\n    ILifecycleModule lifecycleModule = _registryModule.getRegistryAddresses().lifecycleModule;\\n\\n    strikePrice = getNextStrikePrice();\\n    derivative.endTime = lifecycleModule.getCurrentEpochEnd();\\n    derivative.params[0] = strikePrice;\\n    (\\n      longPositionAddress,\\n      ,\\n      availableQuantity\\n    ) = _opiumV2MintPositions(derivative);\\n  }\\n\\n  function startAuction() external canTrade() {\\n    require(strikePrice != 0, \\\"OSS3\\\");\\n\\n    ILifecycleModule lifecycleModule = _registryModule.getRegistryAddresses().lifecycleModule;\\n\\n    uint256[] memory pricingFunctionParams = new uint256[](1);\\n    pricingFunctionParams[0] = auctionAmplifier;\\n\\n    AuctionOrder memory auctionOrder = AuctionOrder(\\n      IERC20(longPositionAddress), // selling token\\n      IERC20(derivative.token), // purchasing token\\n      availableQuantity, // selling amount\\n      PricingFunction.EXPONENTIAL, // pricing function\\n      pricingFunctionParams, // pricing function params\\n      PricingDirection.DECREASING, // pricing function direction\\n      true, // partial fill\\n      availableQuantity * getAuctionMinPrice() / BASE, // min purchasing amount\\n      availableQuantity * getAuctionMaxPrice() / BASE, // max purchasing amount\\n      block.timestamp, // started at\\n      block.timestamp + auctionDuration, // ended at\\n      lifecycleModule.getEpochId() // salt\\n    );\\n\\n    _startAuction(auctionOrder);\\n  }\\n\\n  function execute() external canRebalance() {\\n    _opiumV2ExecutePositions(derivative);\\n\\n    strikePrice = 0;\\n  }\\n\\n  /** Internal Setters */\\n  function _setDerivative(IOpiumCore.Derivative memory derivative_) internal {\\n    derivative = derivative_;\\n  }\\n\\n  function _setStrikePriceDeltaLimit(uint256 strikePriceDeltaLimit_) internal {\\n    strikePriceDeltaLimit = strikePriceDeltaLimit_;\\n  }\\n\\n  function _setStrikePriceDelta(uint256 strikePriceDelta_) internal {\\n    require(strikePriceDelta_ >= strikePriceDeltaLimit, \\\"OSS1\\\");\\n    strikePriceDelta = strikePriceDelta_;\\n  }\\n\\n  function _setStrikePriceRounding(uint256 strikePriceRounding_) internal {\\n    require(strikePriceRounding_ > 0, \\\"OSS1\\\");\\n    strikePriceRounding = strikePriceRounding_;\\n  }\\n\\n  function _setAuctionDuration(uint256 auctionDuration_) internal {\\n    auctionDuration = auctionDuration_;\\n  }\\n\\n  function _setAuctionPrices(uint256 auctionMinPrice_, uint256 auctionMaxPrice_) internal {\\n    auctionMinPrice = auctionMinPrice_;\\n    auctionMaxPrice = auctionMaxPrice_;\\n  }\\n\\n  function _setAuctionAmplifier(uint256 auctionAmplifier_) internal {\\n    auctionAmplifier = auctionAmplifier_;\\n  }\\n}\\n\",\"keccak256\":\"0xa671e5a75519f742e1083173b713f16b8602ddfbada96c0f5e611a0cb1059ac0\",\"license\":\"agpl-3.0\"},\"contracts/modules/Strategies/libraries/external/opium-products/ILiveFeedOracleId.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/// @title Opium.Interface.ILiveFeedOracleId is an interface that every LiveFeed oracleId should implement\\ninterface ILiveFeedOracleId {\\n    /// @notice \\n    /// @param timestamp - Timestamp at which data are needed\\n    function _callback(uint256 timestamp) external;\\n\\n    /// @notice Returns current value of the oracle if possible, or last known value\\n    function getResult() external view returns (uint256 result);\\n\\n    // Event with oracleId metadata JSON string (for Opium derivative explorer)\\n    event LogMetadataSet(string metadata);\\n}\\n\",\"keccak256\":\"0xda29b4baf30a26605bdc4c6feffb12769f8ac0b659c3be6a60418c8260aed9b4\",\"license\":\"agpl-3.0\"},\"contracts/modules/Strategies/libraries/external/opium-protocol/IOpiumCore.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IOpiumCore {\\n  // Opium derivative structure (ticker) definition\\n  struct Derivative {\\n    // Margin parameter for syntheticId\\n    uint256 margin;\\n    // Maturity of derivative\\n    uint256 endTime;\\n    // Additional parameters for syntheticId\\n    uint256[] params;\\n    // oracleId of derivative\\n    address oracleId;\\n    // Margin token address of derivative\\n    address token;\\n    // syntheticId of derivative\\n    address syntheticId;\\n  }\\n  \\n  function redeem(address[2] calldata _positionsAddresses, uint256 _amount) external;\\n  function execute(address _positionAddress, uint256 _amount) external;\\n\\n  function createAndMint(\\n    Derivative calldata _derivative,\\n    uint256 _amount,\\n    address[2] calldata _positionsOwners\\n  ) external;\\n}\\n\",\"keccak256\":\"0x5d053542ec691806637f3de8a78df7f625708103484ca2dd4473863a84a4c65a\",\"license\":\"agpl-3.0\"},\"contracts/modules/Strategies/libraries/external/opium-protocol/IOpiumDerivativeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOpiumCore.sol\\\";\\n\\ninterface IOpiumDerivativeLogic {\\n  function getMargin(IOpiumCore.Derivative memory _derivative)\\n      external\\n      view\\n      returns (uint256 buyerMargin, uint256 sellerMargin);\\n}\\n\",\"keccak256\":\"0xcc1f9aee546e0f663b87ea6ca67d1dffd84d561915563232520e03f24815a859\",\"license\":\"agpl-3.0\"},\"contracts/modules/Strategies/libraries/external/opium-protocol/IOpiumOnChainPositionsLens.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOpiumCore.sol\\\";\\n\\ninterface IOpiumOnChainPositionsLens {\\n  function predictPositionsAddressesByDerivative(\\n    IOpiumCore.Derivative calldata _derivative\\n  ) external view returns (address longPositionAddress, address shortPositionAddress);\\n}\\n\",\"keccak256\":\"0x84d8fee596be3e2c28f8413e2b37699db77f208c5b89da5b5d4249376057fed8\",\"license\":\"agpl-3.0\"},\"contracts/modules/Strategies/libraries/external/opium-protocol/IOpiumRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IOpiumRegistry {\\n  struct ProtocolAddressesArgs {\\n    // Address of Opium.Core contract\\n    address core;\\n    // Address of Opium.OpiumProxyFactory contract\\n    address opiumProxyFactory;\\n    // Address of Opium.OracleAggregator contract\\n    address oracleAggregator;\\n    // Address of Opium.SyntheticAggregator contract\\n    address syntheticAggregator;\\n    // Address of Opium.TokenSpender contract\\n    address tokenSpender;\\n    // Address of the recipient of execution protocol reserves\\n    address protocolExecutionReserveClaimer;\\n    // Address of the recipient of redemption protocol reserves\\n    address protocolRedemptionReserveClaimer;\\n    /// Initially uninitialized variables to allow some flexibility in case of future changes and upgradeability\\n    uint32 __gapOne;\\n    uint32 __gapTwo;\\n  }\\n\\n  function getProtocolAddresses() external view returns (ProtocolAddressesArgs memory);\\n}\\n\",\"keccak256\":\"0x760d91cef2a126f733f37f37e469c64ef0ef70d1176b3e18a5b4cbc802ead74b\",\"license\":\"agpl-3.0\"},\"contracts/modules/Strategies/libraries/external/opium-protocol/LibOpiumCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nlibrary LibOpiumCalculator {\\n  function mulWithPrecisionFactor(uint256 _x, uint256 _y) internal pure returns (uint256) {\\n    return (_x * _y) / 1e18;\\n  }\\n\\n  function modWithPrecisionFactor(uint256 _x) internal pure returns (uint256) {\\n    return _x % 1e18;\\n  }\\n}\\n\",\"keccak256\":\"0x8ce54c15cfa01973c64287744cdb49e48cf1969a4edb13d0779ea48bfe8a3695\",\"license\":\"agpl-3.0\"},\"contracts/utils/Selectors.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nlibrary Selectors {\\n    bytes4 internal constant SAFE_SIGN_MESSAGE = bytes4(keccak256(bytes(\\\"signMessage(bytes)\\\")));\\n\\n    bytes4 internal constant ERC20_TRANSFER = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n    bytes4 internal constant ERC20_APPROVE = bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n}\\n\",\"keccak256\":\"0x83af4db60734b68a5fff9cf0ab80c45ba58d781dbc1f4e614760b10e03f2c8f9\",\"license\":\"agpl-3.0\"},\"opium-auction-v2/contracts/helpers/EIP712Alien.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Alien {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n    address private immutable _ALIEN_ADDRESS;\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(address alien, string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n        _ALIEN_ADDRESS = alien;\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion, alien);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION, _ALIEN_ADDRESS);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version, address alien) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                typeHash,\\n                name,\\n                version,\\n                block.chainid,\\n                alien\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xdfe6481025408058b8ed3e67ccb5c61b13903ade7570266919ba6fed0bfa353a\",\"license\":\"Unlicense\"},\"opium-auction-v2/contracts/helpers/Types.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\nlibrary Types {\\n    struct StaticOrder {\\n        uint256 salt;\\n        address makerAsset;\\n        address takerAsset;\\n        address maker;\\n        address receiver;\\n        address allowedSender;\\n        uint256 makingAmount;\\n        uint256 takingAmount;\\n    }\\n\\n    struct Order {\\n        uint256 salt;\\n        address makerAsset;\\n        address takerAsset;\\n        address maker;\\n        address receiver;\\n        address allowedSender;\\n        uint256 makingAmount;\\n        uint256 takingAmount;\\n        bytes makerAssetData;\\n        bytes takerAssetData;\\n        bytes getMakerAmount;\\n        bytes getTakerAmount;\\n        bytes predicate;\\n        bytes permit;\\n        bytes interaction;\\n    }\\n}\\n\",\"keccak256\":\"0x4bee3a25e569378725b91dea9c42645d1ed4bba2b7f6ad39bea0ab4c69aa4b0a\",\"license\":\"agpl-3.0\"},\"opium-auction-v2/contracts/utils/UsingLimitOrderProtocolV2.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\n\\nimport \\\"../helpers/Types.sol\\\";\\nimport \\\"../helpers/EIP712Alien.sol\\\";\\n\\nabstract contract UsingLimitOrderProtocolV2 is IERC1271, EIP712Alien {\\n  bytes32 constant private _LIMIT_ORDER_TYPEHASH = keccak256(\\n    \\\"Order(uint256 salt,address makerAsset,address takerAsset,address maker,address receiver,address allowedSender,uint256 makingAmount,uint256 takingAmount,bytes makerAssetData,bytes takerAssetData,bytes getMakerAmount,bytes getTakerAmount,bytes predicate,bytes permit,bytes interaction)\\\"\\n  );\\n\\n  address public immutable limitOrderProtocol;\\n\\n  constructor(address limitOrderProtocol_) EIP712Alien(limitOrderProtocol_, \\\"1inch Limit Order Protocol\\\", \\\"2\\\") {\\n    limitOrderProtocol = limitOrderProtocol_;\\n  }\\n\\n  function isValidSignature(bytes32 hash, bytes memory signature) public view returns(bytes4) {\\n    Types.Order memory order = abi.decode(signature, (Types.Order));\\n\\n    require(\\n      hashOrder(order) == hash &&\\n      _isValidOrder(order)\\n    );\\n\\n    return this.isValidSignature.selector;\\n  }\\n\\n  function _isValidOrder(Types.Order memory order_) internal view virtual returns (bool);\\n\\n  function hashOrder(Types.Order memory order) public view returns(bytes32) {\\n    Types.StaticOrder memory staticOrder;\\n    assembly {  // solhint-disable-line no-inline-assembly\\n      staticOrder := order\\n    }\\n    return _hashTypedDataV4(\\n      keccak256(\\n        abi.encode(\\n          _LIMIT_ORDER_TYPEHASH,\\n          staticOrder,\\n          keccak256(order.makerAssetData),\\n          keccak256(order.takerAssetData),\\n          keccak256(order.getMakerAmount),\\n          keccak256(order.getTakerAmount),\\n          keccak256(order.predicate),\\n          keccak256(order.permit),\\n          keccak256(order.interaction)\\n        )\\n      )\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x00bc46cea744de4774fbfb2b779981d236641c4d4c76d6eaac5273db0d4aab17\",\"license\":\"agpl-3.0\"},\"opium-auction-v2/contracts/utils/UsingOpiumAuctionV2.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./UsingLimitOrderProtocolV2.sol\\\";\\n\\nabstract contract UsingOpiumAuctionV2 is UsingLimitOrderProtocolV2 {\\n  address public immutable auctionHelperContract;\\n\\n  // Auction data\\n  enum PricingFunction {\\n    LINEAR,\\n    EXPONENTIAL\\n  }\\n\\n  enum PricingDirection {\\n    INCREASING,\\n    DECREASING\\n  }\\n  \\n  struct AuctionOrder {\\n    IERC20 sellingToken;\\n    IERC20 purchasingToken;\\n    uint256 sellingAmount;\\n    PricingFunction pricingFunction;\\n    uint256[] pricingFunctionParams;\\n    PricingDirection pricingDirection;\\n    bool partialFill;\\n    uint256 minPurchasingAmount;\\n    uint256 maxPurchasingAmount;\\n    uint256 startedAt;\\n    uint256 endedAt;\\n    uint256 salt;\\n  }\\n\\n  constructor(\\n    address auctionHelperContract_,\\n    address limitOrderProtocol_\\n  ) UsingLimitOrderProtocolV2(limitOrderProtocol_) {\\n    auctionHelperContract = auctionHelperContract_;\\n  }\\n\\n  function auctionToLimitOrder(\\n    AuctionOrder memory auctionOrder_,\\n    address maker_,\\n    uint256 nonce_\\n  ) public view returns (Types.Order memory order) {\\n    order.salt = auctionOrder_.salt;\\n    order.makerAsset = address(auctionOrder_.sellingToken);\\n    order.takerAsset = address(auctionOrder_.purchasingToken);\\n    order.maker = maker_;\\n    order.receiver = auctionHelperContract;\\n    order.allowedSender = address(0x0000000000000000000000000000000000000000);\\n    order.makingAmount = auctionOrder_.sellingAmount;\\n    order.takingAmount = auctionOrder_.maxPurchasingAmount;\\n    // Omit: order.makerAssetData;\\n    // Omit: order.takerAssetData;\\n    order.getMakerAmount = _prepareGetMakerAmount(auctionOrder_);\\n    order.getTakerAmount = _prepareGetTakerAmount(auctionOrder_);\\n    order.predicate = _preparePredicate(auctionOrder_, maker_, nonce_);\\n    // Omit: order.permit;\\n    order.interaction = _prepareInteraction(auctionOrder_, maker_);\\n  }\\n\\n  function _prepareGetMakerAmount(AuctionOrder memory auctionOrder_) internal view returns (bytes memory getMakerAmount) {\\n    getMakerAmount = \\n      auctionOrder_.pricingFunction == PricingFunction.LINEAR\\n        ? abi.encodeWithSignature(\\n            \\\"getLinearAuctionMakerAmount(uint256,uint256,uint256,uint256,uint256,bool,uint256)\\\",\\n            auctionOrder_.sellingAmount,\\n            auctionOrder_.maxPurchasingAmount,\\n            auctionOrder_.minPurchasingAmount,\\n            auctionOrder_.startedAt, \\n            auctionOrder_.endedAt,\\n            auctionOrder_.pricingDirection == PricingDirection.INCREASING,\\n            0\\n          )\\n        : abi.encodeWithSignature(\\n            \\\"getExponentialAuctionMakerAmount(uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256)\\\",\\n            auctionOrder_.sellingAmount,\\n            auctionOrder_.maxPurchasingAmount,\\n            auctionOrder_.minPurchasingAmount,\\n            auctionOrder_.startedAt, \\n            auctionOrder_.endedAt,\\n            auctionOrder_.pricingDirection == PricingDirection.INCREASING,\\n            auctionOrder_.pricingFunctionParams[0],\\n            0\\n          );\\n\\n    getMakerAmount = abi.encodeWithSignature(\\\"arbitraryStaticCall(address,bytes)\\\", auctionHelperContract, getMakerAmount);\\n    \\n    getMakerAmount = _slice(getMakerAmount, 0, getMakerAmount.length - 60);\\n  }\\n\\n  function _prepareGetTakerAmount(AuctionOrder memory auctionOrder_) internal view returns (bytes memory getTakerAmount) {\\n    getTakerAmount = \\n      auctionOrder_.pricingFunction == PricingFunction.LINEAR\\n        ? abi.encodeWithSignature(\\n            \\\"getLinearAuctionTakerAmount(uint256,uint256,uint256,uint256,uint256,bool,uint256)\\\",\\n            auctionOrder_.sellingAmount,\\n            auctionOrder_.maxPurchasingAmount,\\n            auctionOrder_.minPurchasingAmount,\\n            auctionOrder_.startedAt, \\n            auctionOrder_.endedAt,\\n            auctionOrder_.pricingDirection == PricingDirection.INCREASING,\\n            0\\n          )\\n        : abi.encodeWithSignature(\\n            \\\"getExponentialAuctionTakerAmount(uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256)\\\",\\n            auctionOrder_.sellingAmount,\\n            auctionOrder_.maxPurchasingAmount,\\n            auctionOrder_.minPurchasingAmount,\\n            auctionOrder_.startedAt, \\n            auctionOrder_.endedAt,\\n            auctionOrder_.pricingDirection == PricingDirection.INCREASING,\\n            auctionOrder_.pricingFunctionParams[0],\\n            0\\n          );\\n\\n    getTakerAmount = abi.encodeWithSignature(\\\"arbitraryStaticCall(address,bytes)\\\", auctionHelperContract, getTakerAmount);\\n\\n    getTakerAmount = _slice(getTakerAmount, 0, getTakerAmount.length - 60);\\n  }\\n\\n  function _preparePredicate(\\n    AuctionOrder memory auctionOrder_,\\n    address maker_,\\n    uint256 nonce_\\n  ) internal view returns (bytes memory predicate) {\\n    address[] memory addressArgs = new address[](2);\\n    addressArgs[0] = auctionHelperContract;\\n    addressArgs[1] = auctionHelperContract;\\n\\n    bytes[] memory bytesArgs = new bytes[](2);\\n    bytesArgs[0] = abi.encodeWithSignature(\\\"nonceEquals(address,uint256)\\\", maker_, nonce_);\\n    bytesArgs[1] = abi.encodeWithSignature(\\\"timestampBelow(uint256)\\\", auctionOrder_.endedAt);\\n\\n    predicate = abi.encodeWithSignature(\\\"and(address[],bytes[])\\\", addressArgs, bytesArgs);\\n  }\\n\\n  function _prepareInteraction(\\n    AuctionOrder memory auctionOrder_,\\n    address maker_\\n  ) internal view returns (bytes memory interaction) {\\n    bytes memory interactionData = abi.encode(\\n      maker_,\\n      !auctionOrder_.partialFill ? auctionOrder_.sellingAmount : 0,\\n      auctionOrder_.startedAt\\n    );\\n\\n    interaction = abi.encodePacked(auctionHelperContract, interactionData);\\n  }\\n\\n  function _slice(\\n    bytes memory _bytes,\\n    uint256 _start,\\n    uint256 _length\\n  ) internal pure returns (bytes memory) {\\n    require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n    require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n    bytes memory tempBytes;\\n\\n    assembly {\\n      switch iszero(_length)\\n      case 0 {\\n        // Get a location of some free memory and store it in tempBytes as\\n        // Solidity does for memory variables.\\n        tempBytes := mload(0x40)\\n\\n        // The first word of the slice result is potentially a partial\\n        // word read from the original array. To read it, we calculate\\n        // the length of that partial word and start copying that many\\n        // bytes into the array. The first word we copy will start with\\n        // data we don't care about, but the last `lengthmod` bytes will\\n        // land at the beginning of the contents of the new array. When\\n        // we're done copying, we overwrite the full first word with\\n        // the actual length of the slice.\\n        let lengthmod := and(_length, 31)\\n\\n        // The multiplication in the next line is necessary\\n        // because when slicing multiples of 32 bytes (lengthmod == 0)\\n        // the following copy loop was copying the origin's length\\n        // and then ending prematurely not copying everything it should.\\n        let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n        let end := add(mc, _length)\\n\\n        for {\\n          // The multiplication in the next line has the same exact purpose\\n          // as the one above.\\n          let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n        } lt(mc, end) {\\n          mc := add(mc, 0x20)\\n          cc := add(cc, 0x20)\\n        } {\\n          mstore(mc, mload(cc))\\n        }\\n\\n        mstore(tempBytes, _length)\\n\\n        //update free-memory pointer\\n        //allocating the array padded to 32 bytes like the compiler does now\\n        mstore(0x40, and(add(mc, 31), not(31)))\\n      }\\n      //if we want a zero-length slice let's just return a zero-length array\\n      default {\\n        tempBytes := mload(0x40)\\n        //zero out the 32 bytes slice we are about to return\\n        //we need to do it because Solidity does not garbage collect\\n        mstore(tempBytes, 0)\\n\\n        mstore(0x40, add(tempBytes, 0x20))\\n      }\\n    }\\n\\n    return tempBytes;\\n  }\\n}\\n\",\"keccak256\":\"0x3f3989446dd64be1c128452904224b06fdd5069bf87c69d0dfd509bf67f13168\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102f15760003560e01c80636b64c7691161019d578063c52987cf116100e9578063e38ed592116100a2578063f2fde38b1161007c578063f2fde38b146106b3578063f936b649146106c6578063fa1cb9f2146106cf578063fd7af4aa146106e257600080fd5b8063e38ed59214610688578063e765cb441461069b578063ec342ad0146106a457600080fd5b8063c52987cf1461062f578063ce07948f14610638578063ce1a52d214610640578063d282bb4c14610651578063d547741f14610662578063dfe274a91461067557600080fd5b806391d1485411610156578063af41733911610130578063af417339146105db578063bd17deb2146105ee578063c01ded66146105ff578063c08e1fb51461062657600080fd5b806391d14854146105ad578063a217fddf146105c0578063a497e674146105c857600080fd5b80636b64c769146105305780636d4a681a14610538578063715018a61461054d5780637d7c2a1c146105555780637f94dd331461055d5780638da5cb5b1461059c57600080fd5b8063211212861161025c5780634461a9ef1161021557806358cd843e116101ef57806358cd843e146104ec5780635a5d7e18146104f55780635fd6102014610515578063614619541461052857600080fd5b80634461a9ef146104c85780634a6702c4146104d157806352125d27146104e457600080fd5b8063211212861461045b578063248a9ca3146104635780632b390349146104865780632f2ff15d1461049957806336568abe146104ac57806338dc6f86146104bf57600080fd5b80631626ba7e116102ae5780631626ba7e1461038f5780631695d51e146103bb57806316de97f6146103ce57806317cfb41d146103e15780631985a89f146103f457806320c995911461045257600080fd5b806301ffc9a7146102f657806304233f061461031e5780630531d3d81461033357806306792f551461035b5780630cbf54c81461037e5780631249c58b14610387575b600080fd5b610309610304366004613e6a565b6106f5565b60405190151581526020015b60405180910390f35b61033161032c366004613e94565b61072c565b005b610346610341366004614028565b610751565b60408051928352602083019190915201610315565b6103706000805160206151ff83398151915281565b604051908152602001610315565b61037060105481565b610331610938565b6103a261039d366004614168565b610ca2565b6040516001600160e01b03199091168152602001610315565b6103316103c93660046141ae565b610ce9565b6103316103dc3660046141cb565b610d31565b6103316103ef366004613e94565b610d5a565b600754600854600a54600b54600c5461041c9493926001600160a01b03908116928116911685565b6040805195865260208601949094526001600160a01b03928316938501939093528116606084015216608082015260a001610315565b610370600f5481565b601254610370565b610370610471366004613e94565b60009081526006602052604090206001015490565b610331610494366004614028565b610d7b565b6103316104a73660046141ed565b610db1565b6103316104ba3660046141ed565b610dd6565b61037060125481565b610370600d5481565b6103316104df366004613e94565b610e50565b610370610e71565b610370600e5481565b610508610503366004614324565b610f9d565b60405161031591906143d5565b6103316105233660046141ae565b611100565b610331611133565b61033161130b565b610540611681565b60405161031591906145e8565b610331611778565b6103316117ae565b6105847f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610315565b6001546001600160a01b0316610584565b6103096105bb3660046141ed565b6119b8565b610370600081565b6103316105d6366004613e94565b6119e3565b601554610584906001600160a01b031681565b6004546001600160a01b0316610584565b6105847f000000000000000000000000000000000000000000000000000000000000000081565b61037060165481565b61037060145481565b601154610370565b6002546001600160a01b0316610584565b6003546001600160a01b0316610584565b6103316106703660046141ed565b611a04565b600554610584906001600160a01b031681565b6103316106963660046145fb565b611a29565b61037060115481565b610370670de0b6b3a764000081565b6103316106c13660046141ae565b611a4a565b61037060135481565b6103706106dd36600461462f565b611ae2565b6103316106f0366004613e94565b611bdf565b60006001600160e01b03198216637965db0b60e01b148061072657506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000805160206151ff83398151915261074481611c12565b61074d82611c1c565b5050565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b031663a3b1b6ec6040518163ffffffff1660e01b815260040160806040518083038186803b1580156107a457600080fd5b505afa1580156107b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107dc9190614802565b600001516001600160a01b0316639b745aec6040518163ffffffff1660e01b815260040160206040518083038186803b15801561081857600080fd5b505afa15801561082c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108509190614886565b905061085a613dec565b8460a001516001600160a01b0316630433fe45866040518263ffffffff1660e01b815260040161088a91906145e8565b604080518083038186803b1580156108a157600080fd5b505afa1580156108b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d9919061489f565b602083018190528183526000916108f091906148ef565b905080610905670de0b6b3a764000085614907565b61090f919061493c565b9450670de0b6b3a76400006109248287614907565b61092e919061493c565b9350505050915091565b600260009054906101000a90046001600160a01b03166001600160a01b031663a3b1b6ec6040518163ffffffff1660e01b815260040160806040518083038186803b15801561098657600080fd5b505afa15801561099a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109be9190614802565b602001516001600160a01b0316632f05205c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109fa57600080fd5b505afa158015610a0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a329190614950565b610a695760405162461bcd60e51b815260206004820152600360248201526242533160e81b60448201526064015b60405180910390fd5b60145415610aa25760405162461bcd60e51b8152600401610a609060208082526004908201526327a9a99960e11b604082015260600190565b600254604080516328ec6dbb60e21b815290516000926001600160a01b03169163a3b1b6ec916004808301926080929190829003018186803b158015610ae757600080fd5b505afa158015610afb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1f9190614802565b602001519050610b2d610e71565b601481905550806001600160a01b03166333d052ff6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b6c57600080fd5b505afa158015610b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba49190614886565b60085560145460098054600090610bbd57610bbd6148c3565b9060005260206000200181905550610c7b60076040518060c0016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020018280548015610c3e57602002820191906000526020600020905b815481526020019060010190808311610c2a575b505050918352505060038201546001600160a01b039081166020830152600483015481166040830152600590920154909116606090910152611c5a565b60165550601580546001600160a01b0319166001600160a01b039290921691909117905550565b60008082806020019051810190610cb991906149b2565b905083610cc582611ae2565b148015610cd0575060015b610cd957600080fd5b50630b135d3f60e11b9392505050565b6000805160206151ff833981519152610d0181611c12565b610d196000805160206151ff8339815191523361229c565b61074d6000805160206151ff83398151915283612303565b6000805160206151ff833981519152610d4981611c12565b50601191909155601255565b505050565b6000805160206151ff833981519152610d7281611c12565b61074d82601355565b6001546001600160a01b03163314610da55760405162461bcd60e51b8152600401610a6090614b69565b610dae81612389565b50565b600082815260066020526040902060010154610dcc81611c12565b610d558383612303565b6001600160a01b0381163314610e465760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a60565b61074d828261229c565b6000805160206151ff833981519152610e6881611c12565b61074d82612407565b600080600760030160009054906101000a90046001600160a01b03166001600160a01b031663de2927896040518163ffffffff1660e01b815260040160206040518083038186803b158015610ec557600080fd5b505afa158015610ed9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efd9190614886565b9050670de0b6b3a7640000600e54670de0b6b3a7640000610f1e91906148ef565b610f289083614907565b610f32919061493c565b91506000600f5483610f449190614b9e565b905060006002600f54610f57919061493c565b600f54908310159150610f6a818661493c565b610f749190614907565b93508015610f8c57600f54610f8990856148ef565b93505b83610f9757600f5493505b50505090565b611043604051806101e001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b610160840151815283516001600160a01b03908116602080840191909152850151811660408084019190915284821660608401527f00000000000000000000000000000000000000000000000000000000000000009091166080830152600060a083015284015160c082015261010084015160e08201526110c384612447565b6101408201526110d284612642565b6101608201526110e38484846127f3565b6101808201526110f384846129f6565b6101c08201529392505050565b6001546001600160a01b0316331461112a5760405162461bcd60e51b8152600401610a6090614b69565b610dae81612a96565b600260009054906101000a90046001600160a01b03166001600160a01b031663a3b1b6ec6040518163ffffffff1660e01b815260040160806040518083038186803b15801561118157600080fd5b505afa158015611195573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b99190614802565b602001516001600160a01b031663a06880c06040518163ffffffff1660e01b815260040160206040518083038186803b1580156111f557600080fd5b505afa158015611209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122d9190614950565b61125f5760405162461bcd60e51b815260206004820152600360248201526221299960e91b6044820152606401610a60565b6040805160c08101825260078054825260085460208084019190915260098054855181840281018401875281815261130496860193909291908301828280156112c757602002820191906000526020600020905b8154815260200190600101908083116112b3575b505050918352505060038201546001600160a01b039081166020830152600483015481166040830152600590920154909116606090910152612b81565b6000601455565b600260009054906101000a90046001600160a01b03166001600160a01b031663a3b1b6ec6040518163ffffffff1660e01b815260040160806040518083038186803b15801561135957600080fd5b505afa15801561136d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113919190614802565b602001516001600160a01b0316632f05205c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113cd57600080fd5b505afa1580156113e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114059190614950565b6114375760405162461bcd60e51b815260206004820152600360248201526242533160e81b6044820152606401610a60565b60145461146f5760405162461bcd60e51b8152600401610a60906020808252600490820152634f53533360e01b604082015260600190565b600254604080516328ec6dbb60e21b815290516000926001600160a01b03169163a3b1b6ec916004808301926080929190829003018186803b1580156114b457600080fd5b505afa1580156114c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ec9190614802565b60209081015160408051600180825281830190925291935060009282810190803683370190505090506013548160008151811061152b5761152b6148c3565b60209081029190910181019190915260408051610180810182526015546001600160a01b039081168252600b541692810192909252601654908201526000906060810160018152602081018490526040016001815260016020820152604001670de0b6b3a764000061159c60115490565b6016546115a99190614907565b6115b3919061493c565b8152602001670de0b6b3a76400006115ca60125490565b6016546115d79190614907565b6115e1919061493c565b8152602001428152602001601054426115fa91906148ef565b8152602001846001600160a01b0316637d36a4106040518163ffffffff1660e01b815260040160206040518083038186803b15801561163857600080fd5b505afa15801561164c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116709190614bc8565b61ffff1690529050610d55816134a7565b6116d56040518060c0016040528060008152602001600081526020016060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b6040805160c08101825260078054825260085460208084019190915260098054855181840281018401875281815294959394938601939283018282801561173b57602002820191906000526020600020905b815481526020019060010190808311611727575b505050918352505060038201546001600160a01b039081166020830152600483015481166040830152600590920154909116606090910152919050565b6001546001600160a01b031633146117a25760405162461bcd60e51b8152600401610a6090614b69565b6117ac600061378f565b565b600260009054906101000a90046001600160a01b03166001600160a01b031663a3b1b6ec6040518163ffffffff1660e01b815260040160806040518083038186803b1580156117fc57600080fd5b505afa158015611810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118349190614802565b602001516001600160a01b031663a06880c06040518163ffffffff1660e01b815260040160206040518083038186803b15801561187057600080fd5b505afa158015611884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a89190614950565b6118da5760405162461bcd60e51b815260206004820152600360248201526221299960e91b6044820152606401610a60565b600260009054906101000a90046001600160a01b03166001600160a01b031663a3b1b6ec6040518163ffffffff1660e01b815260040160806040518083038186803b15801561192857600080fd5b505afa15801561193c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119609190614802565b600001516001600160a01b0316637d7c2a1c6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561199e57600080fd5b505af11580156119b2573d6000803e3d6000fd5b50505050565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206151ff8339815191526119fb81611c12565b61074d82601055565b600082815260066020526040902060010154611a1f81611c12565b610d55838361229c565b6000805160206151ff833981519152611a4181611c12565b61074d826137e1565b6001546001600160a01b03163314611a745760405162461bcd60e51b8152600401610a6090614b69565b6001600160a01b038116611ad95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a60565b610dae8161378f565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052829050611bd87f7b63e94209420c4f6a2a8ca90b36938c948908697db47a5dc7f8e692ead4991a8285610100015180519060200120866101200151805190602001208761014001518051906020012088610160015180519060200120896101800151805190602001208a6101a00151805190602001208b6101c0015180519060200120604051602001611bbd99989796959493929190614bec565b6040516020818303038152906040528051906020012061395e565b9392505050565b6001546001600160a01b03163314611c095760405162461bcd60e51b8152600401610a6090614b69565b610dae81600d55565b610dae81336139ac565b60008111611c555760405162461bcd60e51b8152600401610a60906020808252600490820152634f53533160e01b604082015260600190565b600f55565b6000806000806000611c6b86610751565b6040805180820182526018815277617070726f766528616464726573732c75696e743235362960401b602090910152600354815163050bba6d60e51b815291519395509193506000927f095ea7b334ae44009aa867bfb386f5c3b4b443ac6f0ee573fa91c4608fbadfba926001600160a01b03169163a1774da091600480830192610120929190829003018186803b158015611d0657600080fd5b505afa158015611d1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3e9190614cc5565b608001516040516001600160a01b0390911660248201526044810184905260640160408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925260025460808a0151925163031d9bbd60e21b81529193506001600160a01b031691630c766ef491611dc791908590600401614d7b565b600060405180830381600087803b158015611de157600080fd5b505af1158015611df5573d6000803e3d6000fd5b50505050604051806080016040528060558152602001615132605591398051906020012087846040518060400160405280600260009054906101000a90046001600160a01b03166001600160a01b0316635aef7de66040518163ffffffff1660e01b815260040160206040518083038186803b158015611e7457600080fd5b505afa158015611e88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eac9190614d9f565b6001600160a01b03166001600160a01b03168152602001600260009054906101000a90046001600160a01b03166001600160a01b0316635aef7de66040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1157600080fd5b505afa158015611f25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f499190614d9f565b6001600160a01b03169052604051611f6693929190602401614de8565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252600254600354835163050bba6d60e51b815293519294506001600160a01b0391821693630c766ef493919092169163a1774da091600480830192610120929190829003018186803b158015611fec57600080fd5b505afa158015612000573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120249190614cc5565b516040516001600160e01b031960e084901b16815261204891908590600401614d7b565b600060405180830381600087803b15801561206257600080fd5b505af1158015612076573d6000803e3d6000fd5b50506004805460405163b614f13160e01b8152600094508493506001600160a01b039091169163b614f131916120ae918d91016145e8565b604080518083038186803b1580156120c557600080fd5b505afa1580156120d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fd9190614e10565b915091506000600260009054906101000a90046001600160a01b03166001600160a01b031663a3b1b6ec6040518163ffffffff1660e01b815260040160806040518083038186803b15801561215157600080fd5b505afa158015612165573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121899190614802565b5160405163714f2de760e01b81526001600160a01b038581166004830152600160248301529192509082169063714f2de790604401600060405180830381600087803b1580156121d857600080fd5b505af11580156121ec573d6000803e3d6000fd5b505060405163714f2de760e01b81526001600160a01b038581166004830152600160248301528416925063714f2de79150604401600060405180830381600087803b15801561223a57600080fd5b505af115801561224e573d6000803e3d6000fd5b505050507f7826fc175d9fd683093260471333116a735f2b149ee23f123fe61b31a4bd947b8a87604051612283929190614e3f565b60405180910390a1509098909750929550919350505050565b6122a682826119b8565b1561074d5760008281526006602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61230d82826119b8565b61074d5760008281526006602090815260408083206001600160a01b03851684529091529020805460ff191660011790556123453390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516007908155602080830151600855604083015180518493926123b292600992910190613e0a565b5060608201516003820180546001600160a01b03199081166001600160a01b03938416179091556080840151600484018054831691841691909117905560a09093015160059092018054909316911617905550565b600d548110156124425760405162461bcd60e51b8152600401610a60906020808252600490820152634f53533160e01b604082015260600190565b600e55565b606060008260600151600181111561246157612461614bb2565b1461252c57604082015161010083015160e084015161012085015161014086015160008760a00151600181111561249a5761249a614bb2565b1487608001516000815181106124b2576124b26148c3565b6020908102919091010151604051602481019790975260448701959095526064860193909352608485019190915260a4840152151560c483015260e482015260006101048201526101240160408051601f198184030181529190526020810180516001600160e01b0316631807724d60e21b1790526125c4565b604082015161010083015160e084015161012085015161014086015160008760a00151600181111561256057612560614bb2565b604051602481019790975260448701959095526064860193909352608485019190915260a48401521460c4820152600060e48201526101040160408051601f198184030181529190526020810180516001600160e01b031663bdf854f360e01b1790525b90507f0000000000000000000000000000000000000000000000000000000000000000816040516024016125f9929190614d7b565b60408051601f198184030181529190526020810180516001600160e01b03166317e2bf9b60e31b179052805190915061072690829060009061263d90603c90614e61565b613a10565b606060008260600151600181111561265c5761265c614bb2565b1461272757604082015161010083015160e084015161012085015161014086015160008760a00151600181111561269557612695614bb2565b1487608001516000815181106126ad576126ad6148c3565b6020908102919091010151604051602481019790975260448701959095526064860193909352608485019190915260a4840152151560c483015260e482015260006101048201526101240160408051601f198184030181529190526020810180516001600160e01b0316631106e52960e11b1790526125c4565b604082015161010083015160e084015161012085015161014086015160008760a00151600181111561275b5761275b614bb2565b604051602481019790975260448701959095526064860193909352608485019190915260a48401521460c4820152600060e48201526101040160408051601f198184030181529190526020810180516001600160e01b031663d81c542b60e01b17905290507f0000000000000000000000000000000000000000000000000000000000000000816040516024016125f9929190614d7b565b604080516002808252606080830184529260009291906020830190803683370190505090507f00000000000000000000000000000000000000000000000000000000000000008160008151811061284c5761284c6148c3565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000000000000000000000000000000000000000000000816001815181106128a0576128a06148c3565b6001600160a01b03929092166020928302919091019091015260408051600280825260608201909252600091816020015b60608152602001906001900390816128d1579050506040516001600160a01b03871660248201526044810186905290915060640160408051601f198184030181529190526020810180516001600160e01b031663cf6fc6e360e01b17905281518290600090612942576129426148c3565b602002602001018190525085610140015160405160240161296591815260200190565b60408051601f198184030181529190526020810180516001600160e01b03166363592c2b60e01b1790528151829060019081106129a4576129a46148c3565b602002602001018190525081816040516024016129c2929190614e78565b60408051601f198184030181529190526020810180516001600160e01b0316634b0ead8f60e11b1790529695505050505050565b60606000828460c0015115612a0c576000612a12565b84604001515b610120860151604080516001600160a01b039094166020850152830191909152606082015260800160405160208183030381529060405290507f000000000000000000000000000000000000000000000000000000000000000081604051602001612a7e929190614f19565b60405160208183030381529060405291505092915050565b60026000541415612ae95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a60565b60026000556001600160a01b038116612b2a5760405162461bcd60e51b8152602060048201526003602482015262524d3160e81b6044820152606401610a60565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8a94a9087718f0e83aa163e33a15d3edef3019f120f78e93fba55ecf79750c5d90600090a350506001600055565b6004805460405163b614f13160e01b815260009283926001600160a01b03169163b614f13191612bb3918791016145e8565b604080518083038186803b158015612bca57600080fd5b505afa158015612bde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c029190614e10565b915091506000826001600160a01b03166370a08231600260009054906101000a90046001600160a01b03166001600160a01b0316635aef7de66040518163ffffffff1660e01b815260040160206040518083038186803b158015612c6557600080fd5b505afa158015612c79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c9d9190614d9f565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015612cdc57600080fd5b505afa158015612cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d149190614886565b90506000826001600160a01b03166370a08231600260009054906101000a90046001600160a01b03166001600160a01b0316635aef7de66040518163ffffffff1660e01b815260040160206040518083038186803b158015612d7557600080fd5b505afa158015612d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dad9190614d9f565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015612dec57600080fd5b505afa158015612e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e249190614886565b90508115801590612e3457508015155b1561303d576000818311612e485782612e4a565b815b604080518082018252601a81527f72656465656d28616464726573735b325d2c75696e7432353629000000000000602091820152815180830183526001600160a01b03808a16825288169181019190915290519192506000917fdf849d9c598c3d05f3793fa3a4a039c105615f0fea1aa004ed8d83bdf3eb578191612ed3918590602401614f51565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252600254600354835163050bba6d60e51b815293519294506001600160a01b0391821693630c766ef493919092169163a1774da091600480830192610120929190829003018186803b158015612f5957600080fd5b505afa158015612f6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f919190614cc5565b516040516001600160e01b031960e084901b168152612fb591908590600401614d7b565b600060405180830381600087803b158015612fcf57600080fd5b505af1158015612fe3573d6000803e3d6000fd5b505050508184612ff39190614e61565b9350612fff8284614e61565b92507f0fed1cec8059ec5d4bd2104f8422db85b15123d72c19c725227c8c5a80c8aa8a8783604051613032929190614e3f565b60405180910390a150505b81156131cb5760408051808201825260188152776578656375746528616464726573732c75696e743235362960401b60209182015281516001600160a01b0387811660248301526044808301879052845180840390910181526064909201845291810180516001600160e01b0316631dc4ddc360e11b179052600254600354845163050bba6d60e51b81529451929491841693630c766ef49391169163a1774da091600480830192610120929190829003018186803b1580156130ff57600080fd5b505afa158015613113573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131379190614cc5565b516040516001600160e01b031960e084901b16815261315b91908590600401614d7b565b600060405180830381600087803b15801561317557600080fd5b505af1158015613189573d6000803e3d6000fd5b505050507f0a5ae80b474ed99a340af5f286b5b44f2e4c4d94c6706c76cf88d52be4a23711868460016040516131c193929190614f6c565b60405180910390a1505b80156133595760408051808201825260188152776578656375746528616464726573732c75696e743235362960401b60209182015281516001600160a01b0386811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b0316631dc4ddc360e11b179052600254600354845163050bba6d60e51b81529451929491841693630c766ef49391169163a1774da091600480830192610120929190829003018186803b15801561328d57600080fd5b505afa1580156132a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c59190614cc5565b516040516001600160e01b031960e084901b1681526132e991908590600401614d7b565b600060405180830381600087803b15801561330357600080fd5b505af1158015613317573d6000803e3d6000fd5b505050507f0a5ae80b474ed99a340af5f286b5b44f2e4c4d94c6706c76cf88d52be4a237118683600060405161334f93929190614f6c565b60405180910390a1505b600254604080516328ec6dbb60e21b815290516000926001600160a01b03169163a3b1b6ec916004808301926080929190829003018186803b15801561339e57600080fd5b505afa1580156133b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d69190614802565b5160405163714f2de760e01b81526001600160a01b038781166004830152600060248301529192509082169063714f2de790604401600060405180830381600087803b15801561342557600080fd5b505af1158015613439573d6000803e3d6000fd5b505060405163714f2de760e01b81526001600160a01b038781166004830152600060248301528416925063714f2de79150604401600060405180830381600087803b15801561348757600080fd5b505af115801561349b573d6000803e3d6000fd5b50505050505050505050565b600061353a82600260009054906101000a90046001600160a01b03166001600160a01b0316635aef7de66040518163ffffffff1660e01b815260040160206040518083038186803b1580156134fb57600080fd5b505afa15801561350f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135339190614d9f565b6000610f9d565b9050600061354782611ae2565b6040805180820182526018815277617070726f766528616464726573732c75696e743235362960401b6020918201528582015182516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152604480830193909352845180830390930183526064909101845291810180516001600160e01b031663095ea7b360e01b1790526002548751935163031d9bbd60e21b81529495509093911691630c766ef49161360d91908590600401614d7b565b600060405180830381600087803b15801561362757600080fd5b505af115801561363b573d6000803e3d6000fd5b505060408051808201825260128152717369676e4d6573736167652862797465732960701b6020918201528151908101869052600093507f85a5affea6fef91f51d60c6cba59ec284eed7338cbcd43ac148aac94de4fc43a92500160408051601f19818403018152908290526136b391602401614f96565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092526002546005549251636ba7bbcd60e11b81529193506001600160a01b039081169263d74f779a9261371f9291909116908590600401614d7b565b600060405180830381600087803b15801561373957600080fd5b505af115801561374d573d6000803e3d6000fd5b505050507fe6a2f4396a2eff11e5bb729a4ca4216192d8cd205f6fb66ea04b9c39214976c7856040516137809190614fcb565b60405180910390a15050505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061383582600260009054906101000a90046001600160a01b03166001600160a01b0316635aef7de66040518163ffffffff1660e01b815260040160206040518083038186803b1580156134fb57600080fd5b905060006040518060a001604052806078815260200161518760789139805190602001208260405160240161386a91906143d5565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252600254915163031d9bbd60e21b81529092506001600160a01b0390911690630c766ef4906138f0907f0000000000000000000000000000000000000000000000000000000000000000908590600401614d7b565b600060405180830381600087803b15801561390a57600080fd5b505af115801561391e573d6000803e3d6000fd5b505050507f2f99051314db5b3070b8a9c485b70edc78f8861da6b7bd1c3708f76df89e5c46836040516139519190614fcb565b60405180910390a1505050565b600061072661396b613b1d565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6139b682826119b8565b61074d576139ce816001600160a01b03166014613bfd565b6139d9836020613bfd565b6040516020016139ea9291906150a5565b60408051601f198184030181529082905262461bcd60e51b8252610a6091600401614f96565b606081613a1e81601f6148ef565b1015613a5d5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610a60565b613a6782846148ef565b84511015613aab5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610a60565b606082158015613aca5760405191506000825260208201604052613b14565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015613b03578051835260209283019201613aeb565b5050858452601f01601f1916604052505b50949350505050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415613b6c57507f000000000000000000000000000000000000000000000000000000000000000090565b613bf87f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000613d98565b905090565b60606000613c0c836002614907565b613c179060026148ef565b6001600160401b03811115613c2e57613c2e613ead565b6040519080825280601f01601f191660200182016040528015613c58576020820181803683370190505b509050600360fc1b81600081518110613c7357613c736148c3565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613ca257613ca26148c3565b60200101906001600160f81b031916908160001a9053506000613cc6846002614907565b613cd19060016148ef565b90505b6001811115613d49576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613d0557613d056148c3565b1a60f81b828281518110613d1b57613d1b6148c3565b60200101906001600160f81b031916908160001a90535060049490941c93613d428161511a565b9050613cd4565b508315611bd85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a60565b6040805160208101869052908101849052606081018390524660808201526001600160a01b03821660a082015260009060c0016040516020818303038152906040528051906020012090505b949350505050565b60405180604001604052806002906020820280368337509192915050565b828054828255906000526020600020908101928215613e45579160200282015b82811115613e45578251825591602001919060010190613e2a565b50613e51929150613e55565b5090565b5b80821115613e515760008155600101613e56565b600060208284031215613e7c57600080fd5b81356001600160e01b031981168114611bd857600080fd5b600060208284031215613ea657600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b0381118282101715613ee557613ee5613ead565b60405290565b60405161018081016001600160401b0381118282101715613ee557613ee5613ead565b6040516101e081016001600160401b0381118282101715613ee557613ee5613ead565b60405161012081016001600160401b0381118282101715613ee557613ee5613ead565b604051601f8201601f191681016001600160401b0381118282101715613f7c57613f7c613ead565b604052919050565b600082601f830112613f9557600080fd5b813560206001600160401b03821115613fb057613fb0613ead565b8160051b613fbf828201613f54565b9283528481018201928281019087851115613fd957600080fd5b83870192505b84831015613ff857823582529183019190830190613fdf565b979650505050505050565b6001600160a01b0381168114610dae57600080fd5b803561402381614003565b919050565b60006020828403121561403a57600080fd5b81356001600160401b038082111561405157600080fd5b9083019060c0828603121561406557600080fd5b61406d613ec3565b823581526020830135602082015260408301358281111561408d57600080fd5b61409987828601613f84565b604083015250606083013591506140af82614003565b816060820152608083013591506140c582614003565b81608082015260a083013592506140db83614003565b60a0810192909252509392505050565b60006001600160401b0382111561410457614104613ead565b50601f01601f191660200190565b600082601f83011261412357600080fd5b8135614136614131826140eb565b613f54565b81815284602083860101111561414b57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561417b57600080fd5b8235915060208301356001600160401b0381111561419857600080fd5b6141a485828601614112565b9150509250929050565b6000602082840312156141c057600080fd5b8135611bd881614003565b600080604083850312156141de57600080fd5b50508035926020909101359150565b6000806040838503121561420057600080fd5b82359150602083013561421281614003565b809150509250929050565b80356002811061402357600080fd5b8015158114610dae57600080fd5b80356140238161422c565b6000610180828403121561425857600080fd5b614260613eeb565b905061426b82614018565b815261427960208301614018565b6020820152604082013560408201526142946060830161421d565b606082015260808201356001600160401b038111156142b257600080fd5b6142be84828501613f84565b6080830152506142d060a0830161421d565b60a08201526142e160c0830161423a565b60c082015260e082810135908201526101008083013590820152610120808301359082015261014080830135908201526101609182013591810191909152919050565b60008060006060848603121561433957600080fd5b83356001600160401b0381111561434f57600080fd5b61435b86828701614245565b935050602084013561436c81614003565b929592945050506040919091013590565b60005b83811015614398578181015183820152602001614380565b838111156119b25750506000910152565b600081518084526143c181602086016020860161437d565b601f01601f19169290920160200192915050565b6020815281516020820152600060208301516143fc60408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a08301516001600160a01b03811660c08401525060c083015160e083015260e08301516101008181850152808501519150506101e061012081818601526144886102008601846143a9565b9250808601519050601f196101408187860301818801526144a985846143a9565b9450808801519250506101608187860301818801526144c885846143a9565b9450808801519250506101808187860301818801526144e785846143a9565b9450808801519250506101a081878603018188015261450685846143a9565b9450808801519250506101c081878603018188015261452585846143a9565b90880151878203909201848801529350905061454183826143a9565b9695505050505050565b600081518084526020808501945080840160005b8381101561457b5781518752958201959082019060010161455f565b509495945050505050565b80518252602081015160208301526000604082015160c060408501526145af60c085018261454b565b6060848101516001600160a01b039081169187019190915260808086015182169087015260a09485015116949093019390935250919050565b602081526000611bd86020830184614586565b60006020828403121561460d57600080fd5b81356001600160401b0381111561462357600080fd5b613de484828501614245565b60006020828403121561464157600080fd5b81356001600160401b038082111561465857600080fd5b908301906101e0828603121561466d57600080fd5b614675613f0e565b8235815261468560208401614018565b602082015261469660408401614018565b60408201526146a760608401614018565b60608201526146b860808401614018565b60808201526146c960a08401614018565b60a082015260c083013560c082015260e083013560e082015261010080840135838111156146f657600080fd5b61470288828701614112565b828401525050610120808401358381111561471c57600080fd5b61472888828701614112565b828401525050610140808401358381111561474257600080fd5b61474e88828701614112565b828401525050610160808401358381111561476857600080fd5b61477488828701614112565b828401525050610180808401358381111561478e57600080fd5b61479a88828701614112565b8284015250506101a080840135838111156147b457600080fd5b6147c088828701614112565b8284015250506101c080840135838111156147da57600080fd5b6147e688828701614112565b918301919091525095945050505050565b805161402381614003565b60006080828403121561481457600080fd5b604051608081018181106001600160401b038211171561483657614836613ead565b604052825161484481614003565b8152602083015161485481614003565b6020820152604083015161486781614003565b6040820152606083015161487a81614003565b60608201529392505050565b60006020828403121561489857600080fd5b5051919050565b600080604083850312156148b257600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115614902576149026148d9565b500190565b6000816000190483118215151615614921576149216148d9565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261494b5761494b614926565b500490565b60006020828403121561496257600080fd5b8151611bd88161422c565b600082601f83011261497e57600080fd5b815161498c614131826140eb565b8181528460208386010111156149a157600080fd5b613de482602083016020870161437d565b6000602082840312156149c457600080fd5b81516001600160401b03808211156149db57600080fd5b908301906101e082860312156149f057600080fd5b6149f8613f0e565b82518152614a08602084016147f7565b6020820152614a19604084016147f7565b6040820152614a2a606084016147f7565b6060820152614a3b608084016147f7565b6080820152614a4c60a084016147f7565b60a082015260c083015160c082015260e083015160e08201526101008084015183811115614a7957600080fd5b614a858882870161496d565b8284015250506101208084015183811115614a9f57600080fd5b614aab8882870161496d565b8284015250506101408084015183811115614ac557600080fd5b614ad18882870161496d565b8284015250506101608084015183811115614aeb57600080fd5b614af78882870161496d565b8284015250506101808084015183811115614b1157600080fd5b614b1d8882870161496d565b8284015250506101a08084015183811115614b3757600080fd5b614b438882870161496d565b8284015250506101c08084015183811115614b5d57600080fd5b6147e68882870161496d565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082614bad57614bad614926565b500690565b634e487b7160e01b600052602160045260246000fd5b600060208284031215614bda57600080fd5b815161ffff81168114611bd857600080fd5b6000610200820190508a82528951602083015260208a015160018060a01b0380821660408501528060408d01511660608501528060608d0151166080850152505060808a0151614c4760a08401826001600160a01b03169052565b5060a08a01516001600160a01b03811660c08401525060c08a015160e083015260e08a015161010083015288610120830152876101408301528661016083015285610180830152846101a0830152836101c0830152826101e08301529a9950505050505050505050565b805163ffffffff8116811461402357600080fd5b60006101208284031215614cd857600080fd5b614ce0613f31565b614ce9836147f7565b8152614cf7602084016147f7565b6020820152614d08604084016147f7565b6040820152614d19606084016147f7565b6060820152614d2a608084016147f7565b6080820152614d3b60a084016147f7565b60a0820152614d4c60c084016147f7565b60c0820152614d5d60e08401614cb1565b60e0820152610100614d70818501614cb1565b908201529392505050565b6001600160a01b0383168152604060208201819052600090613de4908301846143a9565b600060208284031215614db157600080fd5b8151611bd881614003565b8060005b60028110156119b25781516001600160a01b0316845260209384019390910190600101614dc0565b608081526000614dfb6080830186614586565b9050836020830152613de46040830184614dbc565b60008060408385031215614e2357600080fd5b8251614e2e81614003565b602084015190925061421281614003565b604081526000614e526040830185614586565b90508260208301529392505050565b600082821015614e7357614e736148d9565b500390565b604080825283519082018190526000906020906060840190828701845b82811015614eba5781516001600160a01b031684529284019290840190600101614e95565b50505083810382850152845180825282820190600581901b8301840187850160005b83811015614f0a57601f19868403018552614ef88383516143a9565b94870194925090860190600101614edc565b50909998505050505050505050565b6bffffffffffffffffffffffff198360601b16815260008251614f4381601485016020870161437d565b919091016014019392505050565b60608101614f5f8285614dbc565b8260408301529392505050565b606081526000614f7f6060830186614586565b602083019490945250901515604090910152919050565b602081526000611bd860208301846143a9565b60028110614fc757634e487b7160e01b600052602160045260246000fd5b9052565b60208152614fe56020820183516001600160a01b03169052565b6000602083015161500160408401826001600160a01b03169052565b5060408301516060830152606083015161501e6080840182614fa9565b5060808301516101808060a085015261503b6101a085018361454b565b915060a085015161504f60c0860182614fa9565b5060c085015180151560e08601525060e085015161010085810191909152850151610120808601919091528501516101408086019190915285015161016080860191909152909401519390920192909252919050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516150dd81601785016020880161437d565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161510e81602884016020880161437d565b01602801949350505050565b600081615129576151296148d9565b50600019019056fe637265617465416e644d696e74282875696e743235362c75696e743235362c75696e743235365b5d2c616464726573732c616464726573732c61646472657373292c75696e743235362c616464726573735b325d2963616e63656c4f72646572282875696e743235362c616464726573732c616464726573732c616464726573732c616464726573732c616464726573732c75696e743235362c75696e743235362c62797465732c62797465732c62797465732c62797465732c62797465732c62797465732c627974657329299c1ca198f61ac1647c38f20b6678649f8e87b7e06309094d812edd1e9119d309a26469706673582212208f47828573fefdf51461fac152154261e24f4eb474ec8e7dac3157ad41f5671a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAvailableQuantity((uint256,uint256,uint256[],address,address,address))": {
        "params": {
          "derivative_": "provided derivative to mint"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isValidSignature(bytes32,bytes)": {
        "details": "Should return whether the signature provided is valid for the provided data",
        "params": {
          "hash": "Hash of the data to be signed",
          "signature": "Signature byte array associated with _data"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setRegistryModule(address)": {
        "params": {
          "registryModule_": "new address / instance of the Registry Module"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ADVISOR_ROLE()": {
        "notice": "Constant containing the hash of the ADVISOR_ROLE"
      },
      "BASE()": {
        "notice": "Reference value (basis) representing 100%"
      },
      "getAvailableQuantity((uint256,uint256,uint256[],address,address,address))": {
        "notice": "Calculates the available quantity of the provided derivative to that's possible to mint with the current Vault's liquidity as well as the margin required to be locked within the minting process"
      },
      "getNextStrikePrice()": {
        "notice": "Public Getters "
      },
      "getOpiumLens()": {
        "notice": "Returns the instance of Opium Protocol V2 Lens"
      },
      "getOpiumRegistry()": {
        "notice": "Returns the instance of Opium Protocol V2 Registry"
      },
      "getRegistryModule()": {
        "notice": "Returns Registry Module instance"
      },
      "rebalance()": {
        "notice": "Trigger Accounting Module to start rebalancing process only when Rebalancing is possible"
      },
      "setDerivative((uint256,uint256,uint256[],address,address,address))": {
        "notice": "Public Setters "
      },
      "setRegistryModule(address)": {
        "notice": "Changes Registry Module instance"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4716,
        "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4594,
        "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6337,
        "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
        "label": "_registryModule",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRegistryAndZodiacModule)6848"
      },
      {
        "astId": 11406,
        "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
        "label": "_opiumRegistry",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IOpiumRegistry)12603"
      },
      {
        "astId": 11410,
        "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
        "label": "_opiumLens",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IOpiumOnChainPositionsLens)12574"
      },
      {
        "astId": 11186,
        "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
        "label": "signMessageLib",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4218,
        "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
        "label": "_roles",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4213_storage)"
      },
      {
        "astId": 12075,
        "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
        "label": "derivative",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Derivative)12517_storage"
      },
      {
        "astId": 12078,
        "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
        "label": "strikePriceDeltaLimit",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 12081,
        "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
        "label": "strikePriceDelta",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 12084,
        "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
        "label": "strikePriceRounding",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 12087,
        "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
        "label": "auctionDuration",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 12090,
        "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
        "label": "auctionMinPrice",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 12093,
        "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
        "label": "auctionMaxPrice",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 12096,
        "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
        "label": "auctionAmplifier",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 12098,
        "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
        "label": "strikePrice",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 12100,
        "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
        "label": "longPositionAddress",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 12102,
        "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
        "label": "availableQuantity",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IOpiumOnChainPositionsLens)12574": {
        "encoding": "inplace",
        "label": "contract IOpiumOnChainPositionsLens",
        "numberOfBytes": "20"
      },
      "t_contract(IOpiumRegistry)12603": {
        "encoding": "inplace",
        "label": "contract IOpiumRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IRegistryAndZodiacModule)6848": {
        "encoding": "inplace",
        "label": "contract IRegistryAndZodiacModule",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4213_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4213_storage"
      },
      "t_struct(Derivative)12517_storage": {
        "encoding": "inplace",
        "label": "struct IOpiumCore.Derivative",
        "members": [
          {
            "astId": 12505,
            "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
            "label": "margin",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12507,
            "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
            "label": "endTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12510,
            "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
            "label": "params",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 12512,
            "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
            "label": "oracleId",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 12514,
            "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
            "label": "token",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 12516,
            "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
            "label": "syntheticId",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)4213_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 4210,
            "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4212,
            "contract": "contracts/modules/Strategies/libraries/OptionCallSellingStrategy.sol:OptionCallSellingStrategy",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}