{
  "address": "0xB183Df5F877B35aA2290d15eb96D350845358431",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accountingAddress",
          "type": "address"
        }
      ],
      "name": "getAccountingData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "poolSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "poolUtilization",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "managementFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "performanceFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "marginDecimals",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "marginAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "marginTitle",
              "type": "string"
            }
          ],
          "internalType": "struct PoolsLens.AccountingDataStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lifecycleAddress",
          "type": "address"
        }
      ],
      "name": "getLifecycleData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "currentEpochTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentEpochStarted",
              "type": "uint256"
            },
            {
              "internalType": "uint256[3]",
              "name": "phasesLength",
              "type": "uint256[3]"
            },
            {
              "internalType": "uint256",
              "name": "epochLength",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isStakingPhase",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isTradingPhase",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isIdlePhase",
              "type": "bool"
            }
          ],
          "internalType": "struct PoolsLens.LifecycleDataStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getPoolData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "stakingAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "accountingAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lifecycleAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vaultAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "strategyAddress",
              "type": "address"
            }
          ],
          "internalType": "struct PoolsLens.ModulesDataStruct",
          "name": "modules",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "poolSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "poolUtilization",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "managementFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "performanceFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "marginDecimals",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "marginAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "marginTitle",
              "type": "string"
            }
          ],
          "internalType": "struct PoolsLens.AccountingDataStruct",
          "name": "accounting",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pendingStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pendingWithdrawal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "userStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAssets",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableShares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            }
          ],
          "internalType": "struct PoolsLens.StakingDataStruct",
          "name": "staking",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "currentEpochTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentEpochStarted",
              "type": "uint256"
            },
            {
              "internalType": "uint256[3]",
              "name": "phasesLength",
              "type": "uint256[3]"
            },
            {
              "internalType": "uint256",
              "name": "epochLength",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isStakingPhase",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isTradingPhase",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isIdlePhase",
              "type": "bool"
            }
          ],
          "internalType": "struct PoolsLens.LifecycleDataStruct",
          "name": "lifecycle",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registryAddress",
          "type": "address"
        }
      ],
      "name": "getPoolModules",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "stakingAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "accountingAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lifecycleAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vaultAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "strategyAddress",
              "type": "address"
            }
          ],
          "internalType": "struct PoolsLens.ModulesDataStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lifecycleAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getStakingData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pendingStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pendingWithdrawal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "userStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAssets",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableShares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            }
          ],
          "internalType": "struct PoolsLens.StakingDataStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc750e9ab13afe0aa65556b63fd3965337986c3eda833794e1559f8e88fea56f9",
  "receipt": {
    "to": null,
    "from": "0xd8166138Eda6dEFD2Bf2403d7637F41CE01C4BbE",
    "contractAddress": "0xB183Df5F877B35aA2290d15eb96D350845358431",
    "transactionIndex": 75,
    "gasUsed": "1389776",
    "logsBloom": "0x
    "blockHash": "0xc029aa4400999413d1ae459d5f5383a3655e9b01a567f29a3fcd43522f9ae8de",
    "transactionHash": "0xc750e9ab13afe0aa65556b63fd3965337986c3eda833794e1559f8e88fea56f9",
    "logs": [
      {
        "transactionIndex": 75,
        "blockNumber": 36822675,
        "transactionHash": "0xc750e9ab13afe0aa65556b63fd3965337986c3eda833794e1559f8e88fea56f9",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d8166138eda6defd2bf2403d7637f41ce01c4bbe",
          "0x0000000000000000000000001efecb61a2f80aa34d3b9218b564a64d05946290"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001cd6c1577f7ba0000000000000000000000000000000000000000000000000ac44edd767f63446000000000000000000000000000000000000000000003231b983ab0425813167000000000000000000000000000000000000000000000000ac2817161076b8a6000000000000000000000000000000000000000000003231b9a081c57d00ad07",
        "logIndex": 423,
        "blockHash": "0xc029aa4400999413d1ae459d5f5383a3655e9b01a567f29a3fcd43522f9ae8de"
      }
    ],
    "blockNumber": 36822675,
    "cumulativeGasUsed": "15310672",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "51dd8d381207e74c9c2dc3b9db627382",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountingAddress\",\"type\":\"address\"}],\"name\":\"getAccountingData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolUtilization\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marginDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"marginAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marginTitle\",\"type\":\"string\"}],\"internalType\":\"struct PoolsLens.AccountingDataStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lifecycleAddress\",\"type\":\"address\"}],\"name\":\"getLifecycleData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentEpochTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentEpochStarted\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"phasesLength\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"epochLength\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStakingPhase\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isTradingPhase\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIdlePhase\",\"type\":\"bool\"}],\"internalType\":\"struct PoolsLens.LifecycleDataStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getPoolData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lifecycleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategyAddress\",\"type\":\"address\"}],\"internalType\":\"struct PoolsLens.ModulesDataStruct\",\"name\":\"modules\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolUtilization\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marginDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"marginAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marginTitle\",\"type\":\"string\"}],\"internalType\":\"struct PoolsLens.AccountingDataStruct\",\"name\":\"accounting\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pendingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolsLens.StakingDataStruct\",\"name\":\"staking\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentEpochTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentEpochStarted\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"phasesLength\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"epochLength\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStakingPhase\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isTradingPhase\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIdlePhase\",\"type\":\"bool\"}],\"internalType\":\"struct PoolsLens.LifecycleDataStruct\",\"name\":\"lifecycle\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"}],\"name\":\"getPoolModules\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lifecycleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategyAddress\",\"type\":\"address\"}],\"internalType\":\"struct PoolsLens.ModulesDataStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lifecycleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getStakingData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pendingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolsLens.StakingDataStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAccountingData(address)\":{\"params\":{\"_accountingAddress\":\"address of Accounting module\"}},\"getLifecycleData(address)\":{\"params\":{\"_lifecycleAddress\":\"address of Lifecycle module\"}},\"getPoolModules(address)\":{\"params\":{\"_registryAddress\":\"address of Registry module\"}},\"getStakingData(address,address,address)\":{\"params\":{\"_lifecycleAddress\":\"address of Staking module\",\"_stakingAddress\":\"address of Staking module\",\"_userAddress\":\"address of user\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAccountingData(address)\":{\"notice\":\"Returns usable data from Accounting module\"},\"getLifecycleData(address)\":{\"notice\":\"Returns usable data from Lifecycle module\"},\"getPoolData(address,address)\":{\"notice\":\"Returns all pool-related and user-based data\"},\"getPoolModules(address)\":{\"notice\":\"Returns addresses of modules\"},\"getStakingData(address,address,address)\":{\"notice\":\"Returns usable data from Staking module\"}},\"notice\":\"Contract for easy fetching pools data\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/PoolsLens.sol\":\"PoolsLens\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"contracts/interfaces/IAccountingModule.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\ninterface IAccountingModule {\\n  event Rebalanced(uint256 totalLiquidityBefore, uint256 profitBeforeFees, uint256 profitFee, uint256 maintenanceFee, uint256 loss);\\n  event FeeCollectorSet(address indexed previousFeeCollector, address indexed newFeeCollector);\\n  event ImmediateProfitFeeSet(uint256 previousFee, uint256 newFee);\\n  event AnnualMaintenanceFeeSet(uint256 previousFee, uint256 newFee);\\n\\n  function getUnderlying() external view returns (IERC20MetadataUpgradeable);\\n  function getTotalLiquidity() external view returns (uint256);\\n  function getUtilizedLiquidity() external view returns (uint256);\\n  function getAvailableLiquidity() external view returns (uint256);\\n  function getLiquidityUtilizationRatio() external view returns (uint256);\\n  function getAccumulatedFees() external view returns (uint256);\\n  function hasPosition(address position_) external view returns (bool);\\n  function getFeeCollector() external view returns (address);\\n  function getImmediateProfitFee() external view returns (uint256);\\n  function getAnnualMaintenanceFee() external view returns (uint256);\\n\\n  function changeTotalLiquidity(uint256 amount_, bool add_) external;\\n  function changeHoldingPosition(address position_, bool add_) external;\\n  function rebalance() external;\\n  function collectFees() external;\\n  function setFeeCollector(address feeCollector_) external;\\n  function setImmediateProfitFee(uint256 immediateProfitFee_) external;\\n  function setAnnualMaintenanceFee(uint256 annualMaintenanceFee_) external;\\n}\\n\",\"keccak256\":\"0xfe636da49249dab734c45d0a24d541c304cc551dfe3200a4ecefb92cedbb18fd\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IEIP4626.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * https://eips.ethereum.org/EIPS/eip-4626\\n */\\ninterface IEIP4626 {\\n  // Events\\n  event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n  event Withdraw(address indexed caller, address indexed receiver, address indexed owner, uint256 assets, uint256 shares);\\n\\n  // View\\n  function asset() external view returns (address assetTokenAddress);\\n  function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n  function convertToShares(uint256 assets) external view returns (uint256 shares);\\n  function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n  function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n  function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n  function maxMint(address receiver) external view returns (uint256 maxShares);\\n  function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n  function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n  function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n  function maxRedeem(address owner) external view returns (uint256 maxShares);\\n  function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n  // Actions\\n  function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n  function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n  function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n  function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0xd4492d928f68d4908bd1550536887246921ac244dfe23223540b938975466d5b\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILifecycleModule.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface ILifecycleModule {\\n  event EpochStarted(uint256 indexed epochId, uint256 epochStart);\\n\\n  function getEpochId() external view returns (uint16);\\n  function getCurrentEpochStart() external view returns (uint256);\\n  function getCurrentEpochEnd() external view returns (uint256);\\n  function getEpochLength() external view returns (uint256);\\n  function getStakingPhaseLength() external view returns (uint256);\\n  function getTradingPhaseLength() external view returns (uint256);\\n  function isStakingPhase() external view returns (bool);\\n  function isTradingPhase() external view returns (bool);\\n  function isIdlePhase() external view returns (bool);\\n  function canDeposit() external view returns (bool);\\n  function canWithdraw() external view returns (bool);\\n  function canTrade() external view returns (bool);\\n  function canRebalance() external view returns (bool);\\n\\n  function progressEpoch() external;\\n}\\n\",\"keccak256\":\"0x985d4aab5d238b20b1d09ef89dd5ab3d2b8ba092b54e414298c1c6b94fcd5fba\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IRegistryModule.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccountingModule.sol\\\";\\nimport \\\"./ILifecycleModule.sol\\\";\\n\\ninterface IRegistryModule {\\n  event RegistryAddressesSet(RegistryAddresses registryAddresses);\\n\\n  struct RegistryAddresses {\\n    IAccountingModule accountingModule;\\n    ILifecycleModule lifecycleModule;\\n    address stakingModule;\\n    address strategyModule;\\n  }\\n\\n  // Getters\\n  function getRegistryAddresses() external view returns (RegistryAddresses memory);\\n\\n  // Setters\\n  function setRegistryAddresses(RegistryAddresses memory registryAddresses_) external;\\n  function executeOnVault(address target, bytes memory data) external;\\n  function executeOnVaultDelegate(address target, bytes memory data) external;\\n}\\n\\ninterface IZodiacModule {\\n  function avatar() external view returns (address);\\n}\\n\\ninterface IRegistryAndZodiacModule is IZodiacModule, IRegistryModule {}\\n\",\"keccak256\":\"0x6ec2a6521a1ea07b1095e1f3f8e68ac39464bce636e51513890dbb4a63819a67\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IStakingModule.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { Schedulers } from \\\"../utils/Schedulers.sol\\\";\\nimport \\\"./IEIP4626.sol\\\";\\n\\n\\ninterface IStakingModule is IERC20Upgradeable, IEIP4626 {\\n  event ScheduledDeposit(address indexed caller, address indexed owner, uint256 assets);\\n  event UnscheduledDeposit(address indexed owner, uint256 assets);\\n  event SharesClaimed(address indexed owner, uint256 shares);\\n  event ScheduledWithdrawal(address indexed caller, address indexed receiver, address indexed owner, uint256 shares);\\n  event UnscheduledWithdrawal(address indexed owner, uint256 shares);\\n  event AssetsClaimed(address indexed owner, uint256 assets);\\n  event RageQuit(address indexed caller, address indexed receiver, address indexed owner, uint256 shares);\\n  event Referral(uint256 indexed id);\\n  event ProcessedScheduled(uint256 depositedAssets, uint256 mintedShares, uint256 burntShares, uint256 withdrawnAssets);\\n\\n  function canDeposit() external view returns (bool);\\n  function canWithdraw() external view returns (bool);\\n  function getScheduledShares(address receiver) external view returns (uint256 scheduledShares);\\n  function getScheduledAssets(address receiver) external view returns (uint256 scheduledAssets);\\n\\n  function depositRef(uint256 assets, address receiver, uint256 referralId) external returns (uint256 shares);\\n  function mintRef(uint256 shares, address receiver, uint256 referralId) external returns (uint256 assets);\\n  function scheduleDeposit(uint256 assets, address receiver) external returns (uint256 shares);\\n  function scheduleDepositRef(uint256 assets, address receiver, uint256 referralId) external returns (uint256 shares);\\n  function unscheduleDeposit(uint256 assets) external;\\n  function claimScheduledShares(uint256 shares, bool claimAll) external;\\n  function scheduleWithdrawal(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n  function unscheduleWithdrawal(uint256 shares) external;\\n  function claimScheduledAssets(uint256 assets, bool claimAll) external;\\n  function rageQuit(uint256 shares, address receiver, address owner, address[] calldata tokens) external;\\n  function postRebalancing() external;\\n\\n}\\n\\ninterface IStakingWrapper is IStakingModule {\\n  function scheduledDeposits(address receiver) external view returns (Schedulers.ScheduledDeposit memory);\\n  function scheduledWithdrawals(address receiver) external view returns (Schedulers.ScheduledWithdrawal memory);\\n}\\n\",\"keccak256\":\"0xa8c579deeaea6a239f289f4ca3af7a5141d2a24fa2b8225dccd30fcdf8c6e47f\",\"license\":\"agpl-3.0\"},\"contracts/utils/PoolsLens.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IRegistryModule.sol\\\";\\nimport \\\"../interfaces/IAccountingModule.sol\\\";\\nimport \\\"../interfaces/IStakingModule.sol\\\";\\nimport \\\"../interfaces/ILifecycleModule.sol\\\";\\n\\n/// @notice Contract for easy fetching pools data\\ncontract PoolsLens {\\n  struct ModulesDataStruct {\\n    address stakingAddress;\\n    address accountingAddress;\\n    address lifecycleAddress;\\n    address vaultAddress;\\n    address strategyAddress;\\n  }\\n\\n  /// @notice Returns addresses of modules\\n  /// @param _registryAddress address of Registry module\\n  function getPoolModules(address _registryAddress) public view returns (ModulesDataStruct memory) {\\n    IRegistryAndZodiacModule registryModule = IRegistryAndZodiacModule(_registryAddress);\\n    IRegistryAndZodiacModule.RegistryAddresses memory addresses = registryModule.getRegistryAddresses();\\n    return ModulesDataStruct(\\n      addresses.stakingModule,\\n      address(addresses.accountingModule),\\n      address(addresses.lifecycleModule),\\n      registryModule.avatar(),\\n      addresses.strategyModule\\n    );\\n  }\\n\\n  struct AccountingDataStruct {\\n    uint256 poolSize;\\n    uint256 poolUtilization;\\n    uint256 managementFee;\\n    uint256 performanceFee;\\n    uint256 marginDecimals;\\n    address marginAddress;\\n    string marginTitle;\\n  }\\n\\n  /// @notice Returns usable data from Accounting module\\n  /// @param _accountingAddress address of Accounting module\\n  function getAccountingData(address _accountingAddress) public view returns (AccountingDataStruct memory) {\\n    IAccountingModule accountingModule = IAccountingModule(_accountingAddress);\\n    IERC20MetadataUpgradeable token = accountingModule.getUnderlying();\\n    return AccountingDataStruct(\\n      accountingModule.getTotalLiquidity(),\\n      accountingModule.getLiquidityUtilizationRatio(),\\n      accountingModule.getAnnualMaintenanceFee(),\\n      accountingModule.getImmediateProfitFee(),\\n      token.decimals(),\\n      address(token),\\n      token.symbol()\\n    );\\n  }\\n\\n  struct StakingDataStruct {\\n    uint256 pendingStake;\\n    uint256 pendingWithdrawal;\\n    uint256 userStaked;\\n    uint256 claimableAssets;\\n    uint256 claimableShares;\\n    uint256 totalSupply;\\n  }\\n\\n  /// @notice Returns usable data from Staking module\\n  /// @param _stakingAddress address of Staking module\\n  /// @param _lifecycleAddress address of Staking module\\n  /// @param _userAddress address of user\\n  function getStakingData(address _stakingAddress, address _lifecycleAddress, address _userAddress) public view returns (StakingDataStruct memory) {\\n    IStakingWrapper stakingModule = IStakingWrapper(_stakingAddress);\\n    ILifecycleModule lifecycleModule = ILifecycleModule(_lifecycleAddress);\\n    \\n    uint256 pendingStake = lifecycleModule.getEpochId() == stakingModule.scheduledDeposits(_userAddress).updatedAtEpoch  ? stakingModule.scheduledDeposits(_userAddress).depositedAssets : 0;\\n    uint256 pendingWithdrawal = lifecycleModule.getEpochId() == stakingModule.scheduledWithdrawals(_userAddress).updatedAtEpoch  ? stakingModule.scheduledWithdrawals(_userAddress).withdrawnShares : 0;\\n    \\n    return StakingDataStruct(\\n      pendingStake,\\n      pendingWithdrawal,\\n      stakingModule.balanceOf(_userAddress),\\n      stakingModule.getScheduledAssets(_userAddress),\\n      stakingModule.getScheduledShares(_userAddress),\\n      stakingModule.totalSupply()\\n    );\\n  }\\n\\n  struct LifecycleDataStruct {\\n    uint256 currentEpochTimestamp;\\n    uint256 currentEpochStarted;\\n    uint256[3] phasesLength;\\n    uint256 epochLength;\\n    bool isStakingPhase;\\n    bool isTradingPhase;\\n    bool isIdlePhase;\\n  }\\n\\n  /// @notice Returns usable data from Lifecycle module\\n  /// @param _lifecycleAddress address of Lifecycle module\\n  function getLifecycleData(address _lifecycleAddress) public view returns (LifecycleDataStruct memory) {\\n    ILifecycleModule lifecycleModule = ILifecycleModule(_lifecycleAddress);\\n    return LifecycleDataStruct(\\n      lifecycleModule.getCurrentEpochEnd(),\\n      lifecycleModule.getCurrentEpochStart(),\\n      [\\n        lifecycleModule.getStakingPhaseLength(), \\n        lifecycleModule.getTradingPhaseLength(), \\n        lifecycleModule.getEpochLength() - lifecycleModule.getStakingPhaseLength() - lifecycleModule.getTradingPhaseLength()\\n      ],\\n      lifecycleModule.getEpochLength(),\\n      lifecycleModule.isStakingPhase(),\\n      lifecycleModule.isTradingPhase(),\\n      lifecycleModule.isIdlePhase()\\n    );\\n  }\\n\\n  /// @notice Returns all pool-related and user-based data\\n  function getPoolData(address _registryAddress, address _userAddress) external view returns(\\n    ModulesDataStruct memory modules,\\n    AccountingDataStruct memory accounting,\\n    StakingDataStruct memory staking,\\n    LifecycleDataStruct memory lifecycle\\n  ) {\\n    modules = getPoolModules(_registryAddress);\\n    accounting = getAccountingData(modules.accountingAddress);\\n    staking = getStakingData(modules.stakingAddress, modules.lifecycleAddress, _userAddress);\\n    lifecycle = getLifecycleData(modules.lifecycleAddress);\\n  }\\n}\\n\",\"keccak256\":\"0x7cec306bf6a9ebc0d034311332fd6767e6c27e340b21ea1b68cca407541f35c1\",\"license\":\"agpl-3.0\"},\"contracts/utils/Schedulers.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n    @notice Library with helpers for Schedulers\\n\\n    Error codes:\\n        - SCH1 = overflow uint120\\n */\\nlibrary Schedulers {\\n    uint256 internal constant BASE = 1e18;\\n\\n    struct ScheduledDeposit {\\n        uint16 updatedAtEpoch;\\n        uint120 depositedAssets;\\n        uint120 scheduledShares;\\n    }\\n    struct ScheduledWithdrawal {\\n        uint16 updatedAtEpoch;\\n        uint120 withdrawnShares;\\n        uint120 scheduledAssets;\\n    }\\n\\n    /// @notice Process scheduled deposits from previous epochs if any\\n    /// @param scheduledDeposit_ instance of scheduled deposit\\n    /// @param sharePriceByEpoch_ mapping that golds share prices by epoch IDs\\n    /// @param currentEpochId_ current epoch ID\\n    function processScheduledShares(\\n        ScheduledDeposit memory scheduledDeposit_,\\n        mapping(uint16 => uint256) storage sharePriceByEpoch_,\\n        uint16 currentEpochId_\\n    )\\n        internal\\n        view\\n        returns (uint256 scheduledShares)\\n    {\\n        scheduledShares = scheduledDeposit_.scheduledShares;\\n\\n        // If there are deposited assets from previous epoch, calculate required shares\\n        if (\\n            scheduledDeposit_.updatedAtEpoch < currentEpochId_ &&\\n            scheduledDeposit_.depositedAssets != 0\\n        ) {\\n            scheduledShares +=\\n                (scheduledDeposit_.depositedAssets *\\n                    sharePriceByEpoch_[scheduledDeposit_.updatedAtEpoch]) /\\n                BASE;\\n        }\\n    }\\n\\n    /// @notice Process scheduled withdrawals from previous epochs if any\\n    /// @param scheduledWithdrawal_ instance of scheduled withdrawal\\n    /// @param sharePriceByEpoch_ mapping that golds share prices by epoch IDs\\n    /// @param currentEpochId_ current epoch ID\\n    function processScheduledAssets(\\n        ScheduledWithdrawal memory scheduledWithdrawal_,\\n        mapping(uint16 => uint256) storage sharePriceByEpoch_,\\n        uint16 currentEpochId_\\n    )\\n        internal\\n        view returns (uint256 scheduledAssets)\\n    {\\n        scheduledAssets = scheduledWithdrawal_.scheduledAssets;\\n\\n        // If there are withdrawn shares from previous epoch, calculate required assets\\n        if (\\n            scheduledWithdrawal_.updatedAtEpoch < currentEpochId_ &&\\n            scheduledWithdrawal_.withdrawnShares != 0\\n        ) {\\n            scheduledAssets +=\\n                (scheduledWithdrawal_.withdrawnShares * BASE) /\\n                sharePriceByEpoch_[scheduledWithdrawal_.updatedAtEpoch];\\n        }\\n    }\\n\\n    function assertUint120(uint256 num) internal pure {\\n        require(num <= type(uint120).max, \\\"SCH1\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x7779bc6cdfee6095a045d29dd1648963ba6562dd87c09bf64f4bdccf50fc96b1\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611830806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806379b10a011461005c578063c75016f114610085578063e9e32193146100a5578063ec6390f4146100c5578063fe4b628f146100e8575b600080fd5b61006f61006a366004611241565b610108565b60405161007c9190611313565b60405180910390f35b610098610093366004611326565b610474565b60405161007c9190611371565b6100b86100b3366004611241565b6109f9565b60405161007c91906113f9565b6100d86100d3366004611407565b610b7b565b60405161007c94939291906114b1565b6100fb6100f6366004611241565b610c36565b60405161007c919061152f565b610110611182565b60008290506000816001600160a01b0316639816f4736040518163ffffffff1660e01b815260040160206040518083038186803b15801561015057600080fd5b505afa158015610164573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610188919061153e565b90506040518060e00160405280836001600160a01b03166335c7e9256040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ce57600080fd5b505afa1580156101e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610206919061155b565b8152602001836001600160a01b031663c69dcf976040518163ffffffff1660e01b815260040160206040518083038186803b15801561024457600080fd5b505afa158015610258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027c919061155b565b8152602001836001600160a01b031663549b46646040518163ffffffff1660e01b815260040160206040518083038186803b1580156102ba57600080fd5b505afa1580156102ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f2919061155b565b8152602001836001600160a01b0316632c165b6c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561033057600080fd5b505afa158015610344573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610368919061155b565b8152602001826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a657600080fd5b505afa1580156103ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103de9190611574565b60ff168152602001826001600160a01b03168152602001826001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561042e57600080fd5b505afa158015610442573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261046a91908101906115ad565b9052949350505050565b6104ad6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405163cf4ca5e160e01b81526001600160a01b038381166004830152859185916000919084169063cf4ca5e19060240160606040518083038186803b1580156104f657600080fd5b505afa15801561050a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052e91906116f7565b6000015161ffff16826001600160a01b0316637d36a4106040518163ffffffff1660e01b815260040160206040518083038186803b15801561056f57600080fd5b505afa158015610583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a79190611713565b61ffff16146105b7576000610635565b60405163cf4ca5e160e01b81526001600160a01b03868116600483015284169063cf4ca5e19060240160606040518083038186803b1580156105f857600080fd5b505afa15801561060c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063091906116f7565b602001515b604051631ac7079760e01b81526001600160a01b0387811660048301526001600160781b03929092169250600091851690631ac707979060240160606040518083038186803b15801561068757600080fd5b505afa15801561069b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bf91906116f7565b6000015161ffff16836001600160a01b0316637d36a4106040518163ffffffff1660e01b815260040160206040518083038186803b15801561070057600080fd5b505afa158015610714573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107389190611713565b61ffff16146107485760006107c6565b604051631ac7079760e01b81526001600160a01b038781166004830152851690631ac707979060240160606040518083038186803b15801561078957600080fd5b505afa15801561079d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c191906116f7565b602001515b6001600160781b031690506040518060c00160405280838152602001828152602001856001600160a01b03166370a08231896040518263ffffffff1660e01b815260040161082391906001600160a01b0391909116815260200190565b60206040518083038186803b15801561083b57600080fd5b505afa15801561084f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610873919061155b565b81526040516336d9816d60e11b81526001600160a01b038981166004830152602090920191871690636db302da9060240160206040518083038186803b1580156108bc57600080fd5b505afa1580156108d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f4919061155b565b81526040516307ef385d60e21b81526001600160a01b038981166004830152602090920191871690631fbce1749060240160206040518083038186803b15801561093d57600080fd5b505afa158015610951573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610975919061155b565b8152602001856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109b357600080fd5b505afa1580156109c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109eb919061155b565b905298975050505050505050565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915260008290506000816001600160a01b031663a3b1b6ec6040518163ffffffff1660e01b815260040160806040518083038186803b158015610a6457600080fd5b505afa158015610a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9c919061172e565b90506040518060a0016040528082604001516001600160a01b0316815260200182600001516001600160a01b0316815260200182602001516001600160a01b03168152602001836001600160a01b0316635aef7de66040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1b57600080fd5b505afa158015610b2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b53919061153e565b6001600160a01b0316815260200182606001516001600160a01b031681525092505050919050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152610bae611182565b610be76040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b610bef6111c8565b610bf8866109f9565b9350610c078460200151610108565b9250610c1c8460000151856040015187610474565b9150610c2b8460400151610c36565b905092959194509250565b610c3e6111c8565b60008290506040518060e00160405280826001600160a01b03166333d052ff6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8757600080fd5b505afa158015610c9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbf919061155b565b8152602001826001600160a01b031663a6e16c4d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cfd57600080fd5b505afa158015610d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d35919061155b565b81526020016040518060600160405280846001600160a01b031663bd4fbbc76040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7e57600080fd5b505afa158015610d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db6919061155b565b8152602001846001600160a01b031663283b0ea06040518163ffffffff1660e01b815260040160206040518083038186803b158015610df457600080fd5b505afa158015610e08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2c919061155b565b8152602001846001600160a01b031663283b0ea06040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6a57600080fd5b505afa158015610e7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea2919061155b565b856001600160a01b031663bd4fbbc76040518163ffffffff1660e01b815260040160206040518083038186803b158015610edb57600080fd5b505afa158015610eef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f13919061155b565b866001600160a01b031663cfe8a73b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4c57600080fd5b505afa158015610f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f84919061155b565b610f8e91906117b3565b610f9891906117b3565b8152508152602001826001600160a01b031663cfe8a73b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fd957600080fd5b505afa158015610fed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611011919061155b565b8152602001826001600160a01b0316637e2d4a636040518163ffffffff1660e01b815260040160206040518083038186803b15801561104f57600080fd5b505afa158015611063573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108791906117d8565b15158152602001826001600160a01b031663487c316a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110c757600080fd5b505afa1580156110db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ff91906117d8565b15158152602001826001600160a01b031663e262ee156040518163ffffffff1660e01b815260040160206040518083038186803b15801561113f57600080fd5b505afa158015611153573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117791906117d8565b151590529392505050565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001606081525090565b6040518060e0016040528060008152602001600081526020016111e961120b565b8152600060208201819052604082018190526060820181905260809091015290565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b038116811461123e57600080fd5b50565b60006020828403121561125357600080fd5b813561125e81611229565b9392505050565b60005b83811015611280578181015183820152602001611268565b8381111561128f576000848401525b50505050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260018060a01b0360a08201511660a0830152600060c082015160e060c085015280518060e08601526101006112fc8282880160208601611265565b80601f19601f840116870101935050505092915050565b60208152600061125e6020830184611295565b60008060006060848603121561133b57600080fd5b833561134681611229565b9250602084013561135681611229565b9150604084013561136681611229565b809150509250925092565b60c081016113b48284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b92915050565b80516001600160a01b03908116835260208083015182169084015260408083015182169084015260608083015182169084015260809182015116910152565b60a081016113b482846113ba565b6000806040838503121561141a57600080fd5b823561142581611229565b9150602083013561143581611229565b809150509250929050565b805182526020808201518184015260408201516040840160005b60038110156114775782518252918301919083019060010161145a565b50505050606081015160a0830152608081015180151560c08401525060a081015180151560e08401525060c0015115156101009190910152565b60006102a06114c083886113ba565b8060a08401526114d281840187611295565b855160c0850152602086015160e085015260408601516101008501526060860151610120850152608086015161014085015260a086015161016085015291506115189050565b611526610180830184611440565b95945050505050565b61012081016113b48284611440565b60006020828403121561155057600080fd5b815161125e81611229565b60006020828403121561156d57600080fd5b5051919050565b60006020828403121561158657600080fd5b815160ff8116811461125e57600080fd5b634e487b7160e01b600052604160045260246000fd5b6000602082840312156115bf57600080fd5b815167ffffffffffffffff808211156115d757600080fd5b818401915084601f8301126115eb57600080fd5b8151818111156115fd576115fd611597565b604051601f8201601f19908116603f0116810190838211818310171561162557611625611597565b8160405282815287602084870101111561163e57600080fd5b61164f836020830160208801611265565b979650505050505050565b805161ffff8116811461166c57600080fd5b919050565b80516001600160781b038116811461166c57600080fd5b60006060828403121561169a57600080fd5b6040516060810181811067ffffffffffffffff821117156116bd576116bd611597565b6040529050806116cc8361165a565b81526116da60208401611671565b60208201526116eb60408401611671565b60408201525092915050565b60006060828403121561170957600080fd5b61125e8383611688565b60006020828403121561172557600080fd5b61125e8261165a565b60006080828403121561174057600080fd5b6040516080810181811067ffffffffffffffff8211171561176357611763611597565b604052825161177181611229565b8152602083015161178181611229565b6020820152604083015161179481611229565b604082015260608301516117a781611229565b60608201529392505050565b6000828210156117d357634e487b7160e01b600052601160045260246000fd5b500390565b6000602082840312156117ea57600080fd5b8151801515811461125e57600080fdfea2646970667358221220e8acb87fe41df118c9c379b0c9f43dc58ec59529c9d7a36ede60027a43f2246a64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806379b10a011461005c578063c75016f114610085578063e9e32193146100a5578063ec6390f4146100c5578063fe4b628f146100e8575b600080fd5b61006f61006a366004611241565b610108565b60405161007c9190611313565b60405180910390f35b610098610093366004611326565b610474565b60405161007c9190611371565b6100b86100b3366004611241565b6109f9565b60405161007c91906113f9565b6100d86100d3366004611407565b610b7b565b60405161007c94939291906114b1565b6100fb6100f6366004611241565b610c36565b60405161007c919061152f565b610110611182565b60008290506000816001600160a01b0316639816f4736040518163ffffffff1660e01b815260040160206040518083038186803b15801561015057600080fd5b505afa158015610164573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610188919061153e565b90506040518060e00160405280836001600160a01b03166335c7e9256040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ce57600080fd5b505afa1580156101e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610206919061155b565b8152602001836001600160a01b031663c69dcf976040518163ffffffff1660e01b815260040160206040518083038186803b15801561024457600080fd5b505afa158015610258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027c919061155b565b8152602001836001600160a01b031663549b46646040518163ffffffff1660e01b815260040160206040518083038186803b1580156102ba57600080fd5b505afa1580156102ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f2919061155b565b8152602001836001600160a01b0316632c165b6c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561033057600080fd5b505afa158015610344573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610368919061155b565b8152602001826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a657600080fd5b505afa1580156103ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103de9190611574565b60ff168152602001826001600160a01b03168152602001826001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561042e57600080fd5b505afa158015610442573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261046a91908101906115ad565b9052949350505050565b6104ad6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405163cf4ca5e160e01b81526001600160a01b038381166004830152859185916000919084169063cf4ca5e19060240160606040518083038186803b1580156104f657600080fd5b505afa15801561050a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052e91906116f7565b6000015161ffff16826001600160a01b0316637d36a4106040518163ffffffff1660e01b815260040160206040518083038186803b15801561056f57600080fd5b505afa158015610583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a79190611713565b61ffff16146105b7576000610635565b60405163cf4ca5e160e01b81526001600160a01b03868116600483015284169063cf4ca5e19060240160606040518083038186803b1580156105f857600080fd5b505afa15801561060c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063091906116f7565b602001515b604051631ac7079760e01b81526001600160a01b0387811660048301526001600160781b03929092169250600091851690631ac707979060240160606040518083038186803b15801561068757600080fd5b505afa15801561069b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bf91906116f7565b6000015161ffff16836001600160a01b0316637d36a4106040518163ffffffff1660e01b815260040160206040518083038186803b15801561070057600080fd5b505afa158015610714573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107389190611713565b61ffff16146107485760006107c6565b604051631ac7079760e01b81526001600160a01b038781166004830152851690631ac707979060240160606040518083038186803b15801561078957600080fd5b505afa15801561079d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c191906116f7565b602001515b6001600160781b031690506040518060c00160405280838152602001828152602001856001600160a01b03166370a08231896040518263ffffffff1660e01b815260040161082391906001600160a01b0391909116815260200190565b60206040518083038186803b15801561083b57600080fd5b505afa15801561084f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610873919061155b565b81526040516336d9816d60e11b81526001600160a01b038981166004830152602090920191871690636db302da9060240160206040518083038186803b1580156108bc57600080fd5b505afa1580156108d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f4919061155b565b81526040516307ef385d60e21b81526001600160a01b038981166004830152602090920191871690631fbce1749060240160206040518083038186803b15801561093d57600080fd5b505afa158015610951573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610975919061155b565b8152602001856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109b357600080fd5b505afa1580156109c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109eb919061155b565b905298975050505050505050565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915260008290506000816001600160a01b031663a3b1b6ec6040518163ffffffff1660e01b815260040160806040518083038186803b158015610a6457600080fd5b505afa158015610a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9c919061172e565b90506040518060a0016040528082604001516001600160a01b0316815260200182600001516001600160a01b0316815260200182602001516001600160a01b03168152602001836001600160a01b0316635aef7de66040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1b57600080fd5b505afa158015610b2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b53919061153e565b6001600160a01b0316815260200182606001516001600160a01b031681525092505050919050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152610bae611182565b610be76040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b610bef6111c8565b610bf8866109f9565b9350610c078460200151610108565b9250610c1c8460000151856040015187610474565b9150610c2b8460400151610c36565b905092959194509250565b610c3e6111c8565b60008290506040518060e00160405280826001600160a01b03166333d052ff6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8757600080fd5b505afa158015610c9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbf919061155b565b8152602001826001600160a01b031663a6e16c4d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cfd57600080fd5b505afa158015610d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d35919061155b565b81526020016040518060600160405280846001600160a01b031663bd4fbbc76040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7e57600080fd5b505afa158015610d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db6919061155b565b8152602001846001600160a01b031663283b0ea06040518163ffffffff1660e01b815260040160206040518083038186803b158015610df457600080fd5b505afa158015610e08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2c919061155b565b8152602001846001600160a01b031663283b0ea06040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6a57600080fd5b505afa158015610e7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea2919061155b565b856001600160a01b031663bd4fbbc76040518163ffffffff1660e01b815260040160206040518083038186803b158015610edb57600080fd5b505afa158015610eef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f13919061155b565b866001600160a01b031663cfe8a73b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4c57600080fd5b505afa158015610f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f84919061155b565b610f8e91906117b3565b610f9891906117b3565b8152508152602001826001600160a01b031663cfe8a73b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fd957600080fd5b505afa158015610fed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611011919061155b565b8152602001826001600160a01b0316637e2d4a636040518163ffffffff1660e01b815260040160206040518083038186803b15801561104f57600080fd5b505afa158015611063573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108791906117d8565b15158152602001826001600160a01b031663487c316a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110c757600080fd5b505afa1580156110db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ff91906117d8565b15158152602001826001600160a01b031663e262ee156040518163ffffffff1660e01b815260040160206040518083038186803b15801561113f57600080fd5b505afa158015611153573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117791906117d8565b151590529392505050565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001606081525090565b6040518060e0016040528060008152602001600081526020016111e961120b565b8152600060208201819052604082018190526060820181905260809091015290565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b038116811461123e57600080fd5b50565b60006020828403121561125357600080fd5b813561125e81611229565b9392505050565b60005b83811015611280578181015183820152602001611268565b8381111561128f576000848401525b50505050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260018060a01b0360a08201511660a0830152600060c082015160e060c085015280518060e08601526101006112fc8282880160208601611265565b80601f19601f840116870101935050505092915050565b60208152600061125e6020830184611295565b60008060006060848603121561133b57600080fd5b833561134681611229565b9250602084013561135681611229565b9150604084013561136681611229565b809150509250925092565b60c081016113b48284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b92915050565b80516001600160a01b03908116835260208083015182169084015260408083015182169084015260608083015182169084015260809182015116910152565b60a081016113b482846113ba565b6000806040838503121561141a57600080fd5b823561142581611229565b9150602083013561143581611229565b809150509250929050565b805182526020808201518184015260408201516040840160005b60038110156114775782518252918301919083019060010161145a565b50505050606081015160a0830152608081015180151560c08401525060a081015180151560e08401525060c0015115156101009190910152565b60006102a06114c083886113ba565b8060a08401526114d281840187611295565b855160c0850152602086015160e085015260408601516101008501526060860151610120850152608086015161014085015260a086015161016085015291506115189050565b611526610180830184611440565b95945050505050565b61012081016113b48284611440565b60006020828403121561155057600080fd5b815161125e81611229565b60006020828403121561156d57600080fd5b5051919050565b60006020828403121561158657600080fd5b815160ff8116811461125e57600080fd5b634e487b7160e01b600052604160045260246000fd5b6000602082840312156115bf57600080fd5b815167ffffffffffffffff808211156115d757600080fd5b818401915084601f8301126115eb57600080fd5b8151818111156115fd576115fd611597565b604051601f8201601f19908116603f0116810190838211818310171561162557611625611597565b8160405282815287602084870101111561163e57600080fd5b61164f836020830160208801611265565b979650505050505050565b805161ffff8116811461166c57600080fd5b919050565b80516001600160781b038116811461166c57600080fd5b60006060828403121561169a57600080fd5b6040516060810181811067ffffffffffffffff821117156116bd576116bd611597565b6040529050806116cc8361165a565b81526116da60208401611671565b60208201526116eb60408401611671565b60408201525092915050565b60006060828403121561170957600080fd5b61125e8383611688565b60006020828403121561172557600080fd5b61125e8261165a565b60006080828403121561174057600080fd5b6040516080810181811067ffffffffffffffff8211171561176357611763611597565b604052825161177181611229565b8152602083015161178181611229565b6020820152604083015161179481611229565b604082015260608301516117a781611229565b60608201529392505050565b6000828210156117d357634e487b7160e01b600052601160045260246000fd5b500390565b6000602082840312156117ea57600080fd5b8151801515811461125e57600080fdfea2646970667358221220e8acb87fe41df118c9c379b0c9f43dc58ec59529c9d7a36ede60027a43f2246a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAccountingData(address)": {
        "params": {
          "_accountingAddress": "address of Accounting module"
        }
      },
      "getLifecycleData(address)": {
        "params": {
          "_lifecycleAddress": "address of Lifecycle module"
        }
      },
      "getPoolModules(address)": {
        "params": {
          "_registryAddress": "address of Registry module"
        }
      },
      "getStakingData(address,address,address)": {
        "params": {
          "_lifecycleAddress": "address of Staking module",
          "_stakingAddress": "address of Staking module",
          "_userAddress": "address of user"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAccountingData(address)": {
        "notice": "Returns usable data from Accounting module"
      },
      "getLifecycleData(address)": {
        "notice": "Returns usable data from Lifecycle module"
      },
      "getPoolData(address,address)": {
        "notice": "Returns all pool-related and user-based data"
      },
      "getPoolModules(address)": {
        "notice": "Returns addresses of modules"
      },
      "getStakingData(address,address,address)": {
        "notice": "Returns usable data from Staking module"
      }
    },
    "notice": "Contract for easy fetching pools data",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}